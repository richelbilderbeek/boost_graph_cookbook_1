Moved stuff to chapters already until here.

\begin{tikzpicture}
  draw[thick] 
    (0,0) node[draw=black,fill=white,shape=circle,text=white] {} 
    -- (5,2) node[draw=black,fill=white,shape=circle,text=white] {} 
    -- (10,1) node[draw=black,fill=white,shape=circle,text=white] {} 
  ;
  \caption{Example of an undirected graph}
  \label{fig:undirected_graph_example}
\end{tikzpicture}


\begin{tikzpicture}
  VertexStyle/.append style = {draw=black,fill=white,shape=circle,text=white},
  EdgeStyle/.append style = {->, bend left} }
  SetGraphUnit{5}
  Vertex{A}   
  EA(A){B}   
  EA(B){C}   
  Edge[](A)(B)   
  Edge[](B)(A)   
  Loop[dist = 4cm, dir = NO](A.west)
  tikzset{EdgeStyle/.append style = {bend left = 0}}
  Edge[](C)(B)   
  \caption{Example of a directed graph}
  \label{fig:directed_graph_example}
end{tikzpicture}

In this chapter, we will build two directed and two undirected graphs:

\begin_layout Itemize
An empty (directed) graph, which is the default type: see chapter 
\ref{subsec:create_empty_directed_graph"

\end_inset




\begin_layout Itemize
An empty (undirected) graph: see chapter 
\ref{subsec:create_empty_undirected_graph"

\end_inset




\begin_layout Itemize
A two-state Markov chain, a directed graph with two vertices and four edges,
 chapter 
\ref{subsec:create_markov_chain_graph"

\end_inset




\begin_layout Itemize
\begin_inset Formula $K_{2}$
\end_inset

, an undirected graph with two vertices and one edge, chapter 
\ref{subsec:create_k2_graph"

\end_inset





Creating an empty graph may sound trivial, it is not, thanks to the versatility
 of the Boost.Graph library.



In the process of creating graphs, some basic (sometimes bordering trivial)
 functions are encountered:


\begin_layout Itemize
Counting the number of vertices: see chapter 
\ref{subsec:get_n_vertices"

\end_inset




\begin_layout Itemize
Counting the number of edges: see chapter 
\ref{subsec:get_n_edges"

\end_inset




\begin_layout Itemize
Adding a vertex: see chapter 
\ref{subsec:add_vertex"

\end_inset




\begin_layout Itemize
Getting all vertices: see chapter 
\ref{subsec:get_vertices"

\end_inset




\begin_layout Itemize
Getting all vertex descriptors: see chapter 
\ref{subsec:get_vertex_descriptors"

\end_inset




\begin_layout Itemize
Adding an edge: see chapter 
\ref{subsec:add_edge"

\end_inset




\begin_layout Itemize
Getting all edges: see chapter 
\ref{subsec:get_edge_iterators"

\end_inset




\begin_layout Itemize
Getting all edge descriptors: see chapter 
\ref{subsec:get_edge_descriptors"

\end_inset





These functions are mostly there for completion and showing which data types
 are used.



The chapter also introduces some important concepts:


\begin_layout Itemize
Vertex descriptors: see chapter 
\ref{subsec:Vertex-descriptors"

\end_inset




\begin_layout Itemize
Edge insertion result: see chapter 
\ref{subsec:boost::add_edge result"

\end_inset




\begin_layout Itemize
Edge descriptors: see chapter 
\ref{subsec:Edge-descriptors"

\end_inset





After this chapter you may want to:


\begin_layout Itemize
Building graphs with named vertices: see chapter 
\ref{sec:Building-graphs-with-named-vertices"

\end_inset




\begin_layout Itemize
Building graphs with bundled vertices: see chapter 
\ref{sec:Building-graphs-with-bundled-vertices"

\end_inset




\begin_layout Itemize
Building graphs with custom vertices: see chapter 
\ref{sec:Building-graphs-with-custom-properties"

\end_inset




\begin_layout Itemize
Building graphs with a graph name: see chapter 
\ref{sec:Building-graphs-with-a-graph-name"

\end_inset




\begin_layout Subsection
Creating an empty (directed) graph
\label{subsec:create_empty_directed_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create an empty directed graph


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Empty directed graph, create


\end_inset





Let's create an empty graph!



Algorithm 
\ref{alg:create_empty_directed_graph"

\end_inset

 shows the function to create an empty graph.
 



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating an empty (directed) graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty directed graph


\end_inset


\label{alg:create_empty_directed_graph"

\end_inset




\end_inset




\end_inset





The code consists out of an #include and a function definition.
 The #include
\begin_inset Index idx
status open

\begin_layout Plain Layout
#include


\end_inset

 tells the compiler to read the header file `adjacency_list.hpp'.
 A header file
\begin_inset Index idx
status open

\begin_layout Plain Layout
header file


\end_inset

 (often with a `.h' or `.hpp' extension) contains class and functions declarations
 and/or definitions.
 The header file `adjacency_list.hpp' contains the boost::adjacency_list
 class definition.
 Without including this file, you will get compile errors like `definition
 of boost::adjacency_list unknown'
\begin_inset Foot
status open

\begin_layout Plain Layout
In practice, these compiler error messages will be longer, bordering the
 unreadable


\end_inset

.
 The function `create_empty_directed_graph' has:


\begin_layout Itemize
a return type: The return type is `boost::adjacency_list<>', that is a `boost::a
djacency_list' with all template arguments set at their defaults


\begin_layout Itemize
a noexcept specification
\begin_inset Index idx
status open

\begin_layout Plain Layout
noexcept specification


\end_inset

: the function should not throw
\begin_inset Foot
status open

\begin_layout Plain Layout
if the function would throw because it cannot allocate this little piece
 of memory, you are already in big trouble


\end_inset

, so it is preferred to mark it noexcept
\begin_inset Index idx
status open

\begin_layout Plain Layout
noexcept


\end_inset

 (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup2013"

\end_inset

 chapter 13.7).


\begin_layout Itemize
a function body: all the function body does is implicitly create its return
 type by using the `{}'.
 An alternative syntax would be `return boost::adjacency_list<>()', which
 is needlessly longer



Algorithm 
\ref{alg:create_empty_directed_graph_demo"

\end_inset

 demonstrates the `create_empty_directed_graph' function.
 This demonstration is embedded within a Boost.Test unit test case.
 It includes a Boost.Test header to allow to use the Boost.Test framework.
 Additionally, a header file is included with the same name as the function
\begin_inset Foot
status open

\begin_layout Plain Layout
I do not think it is important to have creative names


\end_inset

.
 This allows use to be able to use the function.
 The test case creates an empty graph and stores it.
 Instead of specifying the data type explicitly, `auto'
\begin_inset Index idx
status open

\begin_layout Plain Layout
auto


\end_inset

 is used (this is preferred, 
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup2013"

\end_inset

 chapter 31.6), which lets the compiler figure out the type itself.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `create_empty_directed_graph'
\label{alg:create_empty_directed_graph_demo"

\end_inset




\end_inset




\end_inset





Congratulations, you've just created a boost::adjacency_list
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::adjacency_list


\end_inset

 with its default template arguments.
 The boost::adjacency_list is the most commonly used graph type, the other
 is the boost::adjacency_matrix
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::adjacency_matrix


\end_inset

.
 We do not do anything with it yet, but still, you've just created a graph,
 in which:


\begin_layout Itemize
The out edges and vertices are stored in a std::vector
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::vector


\end_inset




\begin_layout Itemize
The edges have a direction


\begin_layout Itemize
The vertices, edges and graph have no properties


\begin_layout Itemize
The edges are stored in a std::list
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::list


\end_inset





It stores its edges, out edges and vertices in a two different STL
\begin_inset Index idx
status open

\begin_layout Plain Layout
STL


\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Standard Template Library, the standard library


\end_inset

 containers.
 std::vector
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::vector


\end_inset

 is the container you should use by default (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup2013"

\end_inset

 chapter 31.6, 
\begin_inset CommandInset citation
LatexCommand cite
key "sutter_and_alexandrescu2004"

\end_inset

 chapter 76), as it has constant time look-up and back insertion.
 The std::list
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::list


\end_inset

 is used for storing the edges, as it is better suited at inserting elements
 at any position.



I use const
\begin_inset Index idx
status open

\begin_layout Plain Layout
const


\end_inset

 to store the empty graph as we do not modify it.
 Correct use of const is called const-correct.
 Prefer to be const-correct
\begin_inset Index idx
status open

\begin_layout Plain Layout
const-correctness


\end_inset

 (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup1997"

\end_inset

 chapter 7.9.3, 
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup2013"

\end_inset

 chapter 12.7, 
\begin_inset CommandInset citation
LatexCommand cite
key "meyers2005effective"

\end_inset

 item 3, 
\begin_inset CommandInset citation
LatexCommand cite
key "hollingworth2000cpp_builder_dev_guide"

\end_inset

 chapter 3, 
\begin_inset CommandInset citation
LatexCommand cite
key "sutter_and_alexandrescu2004"

\end_inset

 item 15, 
\begin_inset CommandInset citation
LatexCommand cite
key "cline1998cpp_faqs"

\end_inset

 FAQ 14.05, 
\begin_inset CommandInset citation
LatexCommand cite
key "eckel2002thinking_cpp"

\end_inset

 item 8, 
\begin_inset CommandInset citation
LatexCommand cite
key "lakos1996large"

\end_inset

 9.1.6).
 


\begin_layout Subsection
Creating an empty undirected graph
\label{subsec:create_empty_undirected_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create an empty graph


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Empty graph, create


\end_inset





Let's create another empty graph! This time, we even make it undirected!



Algorithm 
\ref{alg:create_empty_undirected_graph"

\end_inset

 shows how to create an undirected graph.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating an empty undirected graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty undirected graph


\end_inset


\label{alg:create_empty_undirected_graph"

\end_inset




\end_inset




\end_inset





This algorithm differs from the `create_empty_directed_graph' function (algorith
m 
\ref{alg:create_empty_directed_graph"

\end_inset

) in that there are three template arguments that need to be specified in
 the creation of the boost::adjacency_list:


\begin_layout Itemize
the first `boost::vecS'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS


\end_inset

: select (that is what the `S
\begin_inset Index idx
status open

\begin_layout Plain Layout
S


\end_inset

' means) that out edges are stored in a std::vector.
 This is the default way.


\begin_layout Itemize
the second `boost::vecS'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS


\end_inset

: select that the graph vertices are stored in a std::vector.
 This is the default way.


\begin_layout Itemize
`boost::undirectedS'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS


\end_inset

: select that the graph is undirected.
 This is all we needed to change.
 By default, this argument is boost::directed 
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::directedS


\end_inset





Algorithm 
\ref{alg:create_empty_undirected_graph_demo"

\end_inset

 demonstrates the `create_empty_undirected_graph' function.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `create_empty_undirected_graph'
\label{alg:create_empty_undirected_graph_demo"

\end_inset




\end_inset




\end_inset





Congratulations, with algorithm 
\ref{alg:create_empty_undirected_graph_demo"

\end_inset

, you've just created an undirected graph in which:


\begin_layout Itemize
The out edges and vertices are stored in a std::vector


\begin_layout Itemize
The graph is undirected


\begin_layout Itemize
Vertices, edges and graph have no properties


\begin_layout Itemize
Edges are stored in a std::list 


\begin_layout Subsection
Counting the number of vertices
\label{subsec:get_n_vertices"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertices, counting


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Counting the number of vertices


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Number of vertices, get


\end_inset





Let's count all zero vertices of an empty graph!



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_vertices.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Count the number of vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get n vertices


\end_inset


\label{alg:get_n_vertices"

\end_inset




\end_inset




\end_inset





The function `get_n_vertices' takes the result of boost::num_vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::num_vertices


\end_inset

, converts it to int and checks if there was conversion error.
 We do so, as one should prefer using signed data types over unsigned ones
 in an interface (
\begin_inset CommandInset citation
LatexCommand cite
key "lakos1996large"

\end_inset

 chapter 9.2.2).
 To do so, in the function body its first statement, the unsigned long
\begin_inset Index idx
status open

\begin_layout Plain Layout
unsigned long


\end_inset

 produced by boost::num_vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::num_vertices


\end_inset

 get converted to an int using a static_cast
\begin_inset Index idx
status open

\begin_layout Plain Layout
static_cast


\end_inset

.
 Using an unsigned integer over a (signed) integer for the sake of gaining
 that one more bit (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup1997"

\end_inset

 chapter 4.4) should be avoided.
 The integer `n' is initialized using list-initialization, which is preferred
 over the other initialization syntaxes (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup2013"

\end_inset

 chapter 17.7.6).
 



The assert checks if the conversion back to unsigned long re-creates the
 original value, to check if no information has been lost.
 If information is lost, the program crashes.
 Use assert
\begin_inset Index idx
status open

\begin_layout Plain Layout
assert


\end_inset

 extensively (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup1997"

\end_inset

 chapter 24.5.18, 
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup2013"

\end_inset

 chapter 30.5, 
\begin_inset CommandInset citation
LatexCommand cite
key "sutter_and_alexandrescu2004"

\end_inset

 chapter 68, 
\begin_inset CommandInset citation
LatexCommand cite
key "mcconnell2004code"

\end_inset

 chapter 8.2, 
\begin_inset CommandInset citation
LatexCommand cite
key "liberty2001sams"

\end_inset

 hour 24, 
\begin_inset CommandInset citation
LatexCommand cite
key "lakos1996large"

\end_inset

 chapter 2.6).



The function `get_n_vertices' is demonstrated in algorithm 
\ref{alg:get_n_vertices_demo"

\end_inset

, to measure the number of vertices of both the directed and undirected
 graph we are already able to create.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_vertices_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `get_n_vertices' function
\label{alg:get_n_vertices_demo"

\end_inset




\end_inset




\end_inset





Note that the type of graph does not matter here.
 One can count the number of vertices of every graph, as all graphs have
 vertices.
 Boost.Graph is very good at detecting operations that are not allowed, during
 compile time.


\begin_layout Subsection
Counting the number of edges
\label{subsec:get_n_edges"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edges, counting


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Counting the number of edges


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Number of edges, get


\end_inset





Let's count all zero edges of an empty graph!



This is very similar to the previous chapter, only it uses boost::num_edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::num_edges


\end_inset

 instead:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_edges.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Count the number of edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get n edges


\end_inset


\label{alg:get_n_edges"

\end_inset




\end_inset




\end_inset





This code is similar to the `get_n_vertices' function (algorithm 
\ref{alg:get_n_vertices"

\end_inset

, see rationale there) except `boost::num_edges'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::num_edges


\end_inset

 is used, instead of `boost::num_vertices', which also returns an unsigned
 long.



The function `get_n_edges' is demonstrated in algorithm 
\ref{alg:get_n_edges_demo"

\end_inset

, to measure the number of edges of an empty directed and undirected graph.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_n_edges_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `get_n_edges' function
\label{alg:get_n_edges_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Adding a vertex
\label{subsec:add_vertex"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Add a vertex


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex, add


\end_inset





Empty graphs are nice, now its time to add a vertex!



To add a vertex to a graph, the boost::add_vertex
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::add_vertex


\end_inset

 function is used as shows in algorithm 
\ref{alg:add_vertex"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Adding a vertex to a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Add vertex


\end_inset


\label{alg:add_vertex"

\end_inset




\end_inset




\end_inset





The static_assert
\begin_inset Index idx
status open

\begin_layout Plain Layout
static_assert


\end_inset

 at the top of the function checks during compiling if the function is called
 with a non-const graph.
 One can freely omit this static_assert: you will get a compiler error anyways,
 be it a less helpful one.



Note that boost::add_vertex (in the `add_vertex' function) returns a vertex
 descriptor, which is ignored for now.
 Vertex descriptors are looked at in more details at the chapter 
\ref{subsec:Vertex-descriptors"

\end_inset

, as we need these to add an edge.
 To allow for this already, `add_vertex' also returns a vertex descriptor.
 



Algorithm 
\ref{alg:add_vertex_demo"

\end_inset

 shows how to add a vertex to a directed and undirected graph.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `add_vertex' function
\label{alg:add_vertex_demo"

\end_inset




\end_inset




\end_inset





This demonstration code creates two empty graphs, adds one vertex to each
 and then asserts that the number of vertices in each graph is one.
 This works for both types of graphs, as all graphs have vertices.


\begin_layout Subsection
Vertex descriptors
\label{subsec:Vertex-descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex descriptor


\end_inset





A vertex descriptor is a handle to a vertex within a graph.
 



Vertex descriptors can be obtained by dereferencing a vertex iterator (see
 chapter 
\ref{subsec:get_vertex_descriptors"

\end_inset

).
 To do so, we first obtain some vertex iterators in chapter 
\ref{subsec:get_vertices"

\end_inset

).
 



Vertex descriptors are used to:


\begin_layout Itemize
add an edge between two vertices, see chapter 
\ref{subsec:add_edge"

\end_inset




\begin_layout Itemize
obtain properties of vertex a vertex, for example the vertex its out degrees
 (chapter 
\ref{subsec:get_vertex_out_degrees"

\end_inset

), the vertex its name (chapter 
\ref{subsec:get_vertex_names"

\end_inset

), or a custom vertex property (chapter 
\ref{subsec:get_vertex_my_vertexes"

\end_inset

)



In this tutorial, vertex descriptors have named prefixed with `vd_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vd_


\end_inset

, for example `vd_1'.


\begin_layout Subsection
Get the vertex iterators
\label{subsec:get_vertices"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex iterator


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex iterators, get


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Get vertex iterators


\end_inset





You cannot get the vertices.
 This may sound unexpected, as it must be possible to work on the vertices
 of a graph.
 Working on the vertices of a graph is done through these steps:


\begin_layout Itemize
Obtain a vertex iterator pair from the graph


\begin_layout Itemize
Dereferencing a vertex iterator to obtain a vertex descriptor



`vertices'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vertices


\end_inset

 (not `boost::vertices' 
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertices does not exist


\end_inset

) is used to obtain a vertex iterator pair
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex iterator pair


\end_inset

, as shown in algorithm 
\ref{alg:get_vertex_iterators"

\end_inset

.
 The first vertex iterator
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex iterator


\end_inset

 points to the first vertex (its descriptor, to be precise), the second
 points to beyond the last vertex (its descriptor, to be precise).
 In this tutorial, vertex iterator pairs have named prefixed with `vip_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vip_


\end_inset

, for example `vip_1'.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_iterators.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the vertex iterators of a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get vertices


\end_inset


\label{alg:get_vertex_iterators"

\end_inset




\end_inset




\end_inset





This is a somewhat trivial function, as it forwards the function call to
 `vertices'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vertices


\end_inset

 (not `boost::vertices' 
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertices does not exist


\end_inset

).



These vertex iterators can be dereferenced to obtain the vertex descriptors.
 Note that `get_vertex_iterators' will not be used often in isolation: usually
 one obtains the vertex descriptors immediately.
 Just for your reference, algorithm 
\ref{alg:get_vertex_iterators_demo"

\end_inset

 demonstrates of the `get_vertices' function, by showing that the vertex
 iterators of an empty graph point to the same location.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_iterators_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `get_vertex_iterators'
\label{alg:get_vertex_iterators_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Get all vertex descriptors
\label{subsec:get_vertex_descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex descriptors, get


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Get vertex descriptors


\end_inset





Vertex descriptors are the way to manipulate those vertices.
 Let's go get the all!



Vertex descriptors are obtained from dereferencing vertex iterators.
 Algorithm 
\ref{alg:get_vertex_descriptors"

\end_inset

 shows how to obtain all vertex descriptors from a graph.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_descriptors.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get all vertex descriptors of a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get vertex descriptors


\end_inset


\label{alg:get_vertex_descriptors"

\end_inset




\end_inset




\end_inset





This is the first more complex piece of code.
 In the first lines, some `using' statements allow for shorter type names
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
which may be necessary just to create a tutorial with code snippets that
 are readable


\end_inset

.
 



The std::vector to serve as a return value is created at the needed size,
 which is the number of vertices.
 



The function `vertices'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vertices


\end_inset

 (not boost::vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertices does not exist


\end_inset

!) returns a vertex iterator pair.
 These iterators are used by std::copy to iterator over.
 std::copy
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::copy


\end_inset

 is an STL algorithm to copy a half-open range.
 Prefer algorithm calls over hand-written for-loops (
\begin_inset CommandInset citation
LatexCommand cite
key "stroustrup1997"

\end_inset

 chapter 18.12.1, 
\begin_inset CommandInset citation
LatexCommand cite
key "meyers2005effective"

\end_inset

 item 43).



In this case, we copy all vertex descriptors in the range produced by `vertices'
 to the std::vector.



This function will not be used in practice: one iterates over the vertices
 directly instead, saving the cost of creating a std::vector.
 This function is only shown as an illustration.



Algorithm 
\ref{alg:get_vertex_descriptors_demo"

\end_inset

 demonstrates that an empty graph has no vertex descriptors:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_descriptors_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `get_vertex_descriptors'
\label{alg:get_vertex_descriptors_demo"

\end_inset




\end_inset




\end_inset





Because all graphs have vertices and thus vertex descriptors, the type of
 graph is unimportant for this code to compile.


\begin_layout Subsection
Add an edge
\label{subsec:add_edge"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Add an edge


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge, add


\end_inset





To add an edge to a graph, two vertex descriptors are needed.
 A vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex descriptor


\end_inset

 is a handle to the vertex within a graph (vertex descriptors are looked
 at in more details in chapter 
\ref{subsec:Vertex-descriptors"

\end_inset

).
 Algorithm 
\ref{alg:add_edge"

\end_inset

 adds two vertices to a graph, and connects these two using boost::add_edge
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
boost::add_edge


\end_inset

: 



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Adding (two vertices and) an edge to a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
add_edge


\end_inset


\label{alg:add_edge"

\end_inset




\end_inset




\end_inset





Algorithm 
\ref{alg:add_edge"

\end_inset

 shows how to add an isolated edge to a graph (instead of allowing for graphs
 with higher connectivities).
 First, two vertices are created, using the function `boost::add_vertex'.
 `boost::add_vertex' returns a vertex descriptor (which I prefix with `vd'
\begin_inset Index idx
status open

\begin_layout Plain Layout
vd


\end_inset

), both of which are stored.
 The vertex descriptors are used to add an edge to the graph, using `boost::add_
edge'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge


\end_inset

.
 `boost::add_edge'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge


\end_inset

 returns a std::pair
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::pair


\end_inset

, consisting of an edge descriptor and a boolean success indicator.
 The success of adding the edge is checked by an assert statement.
 Here we assert
\begin_inset Index idx
status open

\begin_layout Plain Layout
assert


\end_inset

 that this insertion was successful.
 Insertion can fail if an edge is already present and duplicates are not
 allowed.



A demonstration of add_edge is shown in algorithm 
\ref{alg:add_edge_demo"

\end_inset

, in which an edge is added to both a directed and undirected graph, after
 which the number of edges and vertices is checked.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `add_edge'
\label{alg:add_edge_demo"

\end_inset




\end_inset




\end_inset





The graph type is unimportant: as all graph types have vertices and edges,
 edges can be added without possible compile problems.


\begin_layout Subsection
boost::add_edge result
\label{subsec:boost::add_edge result"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge result


\end_inset





When using the function `boost::add_edge', a `std::pair<edge_descriptor,bool>'
 is returned.
 It contains both the edge descriptor (see chapter 
\ref{subsec:Edge-descriptors"

\end_inset

) and a boolean, which indicates insertion success.



In this tutorial, boost::add_edge results have named prefixed with `aer_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
aer_


\end_inset

, for example `aer_1'.


\begin_layout Subsection
Getting the edge iterators
\label{subsec:get_edge_iterators"

\end_inset





You cannot get the edges directly.
 Instead, working on the edges of a graph is done through these steps:


\begin_layout Itemize
Obtain an edge iterator pair from the graph


\begin_layout Itemize
Dereference an edge iterator to obtain an edge descriptor



`edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
edges


\end_inset

' (not boost::edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edges does not exist


\end_inset

!) is used to obtain an edge iterator pair
\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge iterator pair


\end_inset

.
 The first edge iterator
\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge iterator


\end_inset

 points to the first edge (its descriptor, to be precise), the second points
 to beyond the last edge (its descriptor, to be precise).
 In this tutorial, edge iterator pairs have named prefixed with `eip_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
eip_


\end_inset

, for example `eip_1'.
 Algorithm 
\ref{alg:get_edge_iterators"

\end_inset

 shows how to obtain these:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_iterators.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the edge iterators of a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get edge iterators


\end_inset


\label{alg:get_edge_iterators"

\end_inset




\end_inset




\end_inset





This is a somewhat trivial function, as all it does is forward to function
 call to `edges' (not boost::edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edges does not exist


\end_inset

!) These edge iterators can be dereferenced to obtain the edge descriptors.
 Note that this function will not be used often in isolation: usually one
 obtains the edge descriptors immediately.



Algorithm 
\ref{alg:get_edge_iterators_demo"

\end_inset

 demonstrates `get_edge_iterators' by showing that both iterators of the
 edge iterator pair point to the same location, when the graph is empty.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_iterators_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `get_edge_iterators'
\label{alg:get_edge_iterators_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Edge descriptors
\label{subsec:Edge-descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge descriptor


\end_inset





An edge descriptor is a handle to an edge within a graph.
 They are similar to vertex descriptors (chapter 
\ref{subsec:Vertex-descriptors"

\end_inset

).
 



Edge descriptors are used to obtain the name, or other properties, of an
 edge



In this tutorial, edge descriptors have named prefixed with `ed_'
\begin_inset Index idx
status open

\begin_layout Plain Layout
ed_


\end_inset

, for example `ed_1'.


\begin_layout Subsection
Get all edge descriptors
\label{subsec:get_edge_descriptors"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge descriptors, get


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Get edge descriptors


\end_inset





Obtaining all edge descriptors is similar to obtaining all vertex descriptors
 (algorithm 
\ref{alg:get_vertex_descriptors"

\end_inset

), as shown in algorithm 
\ref{alg:get_edge_descriptors"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_descriptors.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get all edge descriptors of a graph
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get edge descriptors


\end_inset


\label{alg:get_edge_descriptors"

\end_inset




\end_inset




\end_inset





The only difference is that instead of the function `vertices' (not boost::verti
ces
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vertices does not exist


\end_inset

!), `edges'
\begin_inset Index idx
status open

\begin_layout Plain Layout
edges


\end_inset

 (not boost::edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edges does not exist


\end_inset

!) is used.
 



Algorithm 
\ref{alg:get_edge_descriptors_demo"

\end_inset

 demonstrates the `get_edge_descriptor', by showing that empty graphs do
 not have any edge descriptors.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_descriptors_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of get_edge_descriptors
\label{alg:get_edge_descriptors_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Creating a directed graph
\label{subsec:create_markov_chain_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create directed graph


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Directed graph, create


\end_inset





Finally, we are going to create a directed non-empty graph! 


\begin_layout Subsubsection
Graph



This directed graph is a two-state Markov chain, with two vertices and four
 edges, as depicted in figure 
\ref{fig:markov_chain"

\end_inset

:



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}   


\begin_layout Plain Layout


\backslash
tikzset{ 


\begin_layout Plain Layout

  VertexStyle/.append style = {draw=black,fill=white,shape=circle,text=white},


\begin_layout Plain Layout

  EdgeStyle/.append style = {->, bend left} }


\begin_layout Plain Layout


\backslash
SetGraphUnit{5}


\begin_layout Plain Layout


\backslash
Vertex{A}   


\begin_layout Plain Layout


\backslash
EA(A){B}   


\begin_layout Plain Layout


\backslash
Edge[](A)(B)   


\begin_layout Plain Layout


\backslash
Edge[](B)(A)   


\begin_layout Plain Layout


\backslash
Loop[dist = 4cm, dir = NO](A.west)


\begin_layout Plain Layout


\backslash
Loop[dist = 4cm, dir = SO](B.east)


\begin_layout Plain Layout


\backslash
end{tikzpicture}


\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The two-state Markov chain
\label{fig:markov_chain"

\end_inset




\end_inset




\end_inset





Note that directed graphs can have edges that start and end in the same
 vertex.
 These are called self-loops.


\begin_layout Subsubsection
Function to create such a graph



To create this two-state Markov chain, the following code can be used:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_markov_chain.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating the two-state Markov chain as depicted in figure 
\ref{fig:markov_chain"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create Markov chain


\end_inset


\label{alg:create_markov_chain_graph"

\end_inset




\end_inset




\end_inset





Instead of typing the complete type, we call the `create_empty_directed_graph'
 function, and let auto figure out the type.
 The vertex descriptors (see chapter 
\ref{subsec:Vertex-descriptors"

\end_inset

) created by two boost::add_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_vertex


\end_inset

 calls are stored to add an edge to the graph.
 Then boost::add_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge


\end_inset

 is called four times.
 Every time, its return type (see chapter 
\ref{subsec:boost::add_edge result"

\end_inset

) is checked for a successful insertion.



Note that the graph lacks all properties: nodes do not have names, nor do
 edges.


\begin_layout Subsubsection
Creating such a graph



Algorithm 
\ref{create_markov_chain_demo"

\end_inset

 demonstrates the `create_markov_chain_graph' function and checks if it
 has the correct amount of edges and vertices:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_markov_chain_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `create_markov_chain' 
\label{create_markov_chain_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .dot file produced
\label{subsec:create_markov_chain.dot"

\end_inset





Running a bit ahead, this graph can be converted to a .dot file using the
 `save_graph_to_dot' function (algorithm 
\ref{alg:save_graph_to_dot"

\end_inset

).
 The .dot file created is displayed in algorithm 
\ref{alg:create_markov_chain.dot"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_markov_chain.dot"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the `create_markov_chain_graph' function (algorithm
 
\ref{alg:create_markov_chain_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\ref{alg:save_graph_to_dot"

\end_inset


\label{alg:create_markov_chain.dot"

\end_inset




\end_inset




\end_inset





From the .dot file one can already see that the graph is directed, because:


\begin_layout Itemize
The first word, `digraph', denotes a directed graph (where `graph' would
 have indicated an undirected graph)


\begin_layout Itemize
The edges are written as `->' (where undirected connections would be written
 as `–')


\begin_layout Subsubsection
The .svg file produced
\label{subsec:create_markov_chain.svg"

\end_inset





The .svg file of this graph is shown in figure 
\ref{fig:create_markov_chain.svg"

\end_inset

:



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_markov_chain.svg

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the `create_markov_chain' function (algorithm 
\ref{alg:create_markov_chain_graph"

\end_inset

) its .dot file and converted from .dot file to .svg using algorithm 
\ref{alg:convert_dot_to_svg"

\end_inset


\label{fig:create_markov_chain.svg"

\end_inset




\end_inset




\end_inset





This figure shows that the graph in directed, as the edges have arrow heads.
 The vertices display the node index, which is the default behavior.


\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

, a fully connected undirected graph with two vertices
\label{subsec:create_k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{2}$
\end_inset




\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

, create


\end_inset





Finally, we are going to create an undirected non-empty graph!


\begin_layout Subsubsection
Graph



To create a fully connected undirected graph with two vertices (also called
 
\begin_inset Formula $K_{2}$
\end_inset

), one needs two vertices and one (undirected) edge, as depicted in figure
 
\ref{fig:k2_graph"

\end_inset

.



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 


\begin_layout Plain Layout


\backslash
draw[thick] 


\begin_layout Plain Layout

  (0,0) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

    -- (5,1) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

;


\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

: a fully connected undirected graph with two vertices
\label{fig:k2_graph"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Function to create such a graph



To create 
\begin_inset Formula $K_{2}$
\end_inset

, the following code can be used:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k2_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 as depicted in figure 
\ref{fig:k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{2}$
\end_inset

 graph


\end_inset


\label{alg:create_k2_graph"

\end_inset




\end_inset




\end_inset





This code is very similar to the `add_edge' function (algorithm 
\ref{alg:add_edge"

\end_inset

).
 Instead of typing the graph its type, we call the `create_empty_undirected_grap
h' function and let auto figure it out.
 The vertex descriptors (see chapter 
\ref{subsec:Vertex-descriptors"

\end_inset

) created by two boost::add_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_vertex


\end_inset

 calls are stored to add an edge to the graph.
 From boost::add_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::add_edge


\end_inset

 its return type (see chapter 
\ref{subsec:boost::add_edge result"

\end_inset

), it is only checked that insertion has been successful.



Note that the graph lacks all properties: nodes do not have names, nor do
 edges.


\begin_layout Subsubsection
Creating such a graph



Algorithm 
\ref{alg:create_k2_graph_demo"

\end_inset

 demonstrates how to `create_k2_graph' and checks if it has the correct
 amount of edges and vertices:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k2_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `create_k2_graph' 
\label{alg:create_k2_graph_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .dot file produced
\label{subsec:create_k2.dot"

\end_inset





Running a bit ahead, this graph can be converted to the .dot file as shown
 in algorithm 
\ref{alg:create_k2_graph.dot"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the `create_k2_graph' function (algorithm 
\ref{alg:create_k2_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\ref{alg:save_graph_to_dot"

\end_inset


\label{alg:create_k2_graph.dot"

\end_inset




\end_inset




\end_inset





From the .dot file one can already see that the graph is undirected, because:


\begin_layout Itemize
The first word, `graph', denotes an undirected graph (where `digraph' would
 have indicated a directional graph)


\begin_layout Itemize
The edge between 0 and 1 is written as `–' (where directed connections would
 be written as `->', `<-' or `<>')


\begin_layout Subsubsection
The .svg file produced
\label{subsec:create_k2.svg"

\end_inset





Continuing to running a bit ahead, this .dot file can be converted to the
 .svg as shown in figure 
\ref{fig:create_k2_graph.svg"

\end_inset

:



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_k2_graph.svg

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the `create_k2_graph' function (algorithm 
\ref{alg:create_k2_graph"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\ref{alg:convert_dot_to_svg"

\end_inset


\label{fig:create_k2_graph.svg"

\end_inset




\end_inset




\end_inset





Also this figure shows that the graph in undirected, otherwise the edge
 would have one or two arrow heads.
 The vertices display the node index, which is the default behavior.


\begin_layout Subsection
$\triangle$ Creating 
\begin_inset Formula $K_{3}$
\end_inset

, a fully connected undirected graph with three vertices
\label{subsec:create_k3_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{3}$
\end_inset




\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
\begin_inset Formula $K_{3}$
\end_inset

, create


\end_inset





This is an extension of the previous chapter


\begin_layout Subsubsection
Graph



To create a fully connected undirected graph with two vertices (also called
 
\begin_inset Formula $K_{2}$
\end_inset

), one needs two vertices and one (undirected) edge, as depicted in figure
 
\ref{fig:create_k3_graph"

\end_inset

.



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 


\begin_layout Plain Layout


\backslash
draw[thick] 


\begin_layout Plain Layout

  (2,4) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

   -- (3,2) node[anchor=west] {} 


\begin_layout Plain Layout

   -- (4,0) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

   -- (2,0) node[anchor=north] {} 


\begin_layout Plain Layout

   -- (0,0) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

   -- (1,2) node[anchor=east] {} 


\begin_layout Plain Layout

   -- (2,4)


\begin_layout Plain Layout

;


\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $K_{3}$
\end_inset

: a fully connected graph with three edges and vertices 
\label{fig:create_k3_graph"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Function to create such a graph



To create 
\begin_inset Formula $K_{3}$
\end_inset

, the following code can be used:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k3_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 as depicted in figure 
\ref{fig:create_k3_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create 
\begin_inset Formula $K_{3}$
\end_inset

 graph


\end_inset


\label{alg:create_k3_graph"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Creating such a graph



Algorithm 
\ref{alg:create_k3_graph_demo"

\end_inset

 demonstrates how to `create_k2_graph' and checks if it has the correct
 amount of edges and vertices:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k3_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `create_k3_graph' 
\label{alg:create_k3_graph_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .dot file produced
\label{subsec:create_k3_graph.dot"

\end_inset





This graph can be converted to the .dot file as shown in algorithm 
\ref{alg:create_k3_graph.dot"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_k3_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the `create_k3_graph' function (algorithm 
\ref{alg:create_k3_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\ref{alg:save_graph_to_dot"

\end_inset


\label{alg:create_k3_graph.dot"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .svg file produced
\label{subsec:create_k3.svg"

\end_inset





Continuing to running a bit ahead, this .dot file can be converted to the
 .svg as shown in figure 
\ref{fig:create_k3_graph.svg"

\end_inset

:



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_k3_graph.svg

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the `create_k3_graph' function (algorithm 
\ref{alg:create_k3_graph"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\ref{alg:convert_dot_to_svg"

\end_inset


\label{fig:create_k3_graph.svg"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
$\triangle$ Creating a path graph
\label{subsec:create_path_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create path graph


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Path graph, create


\end_inset





A path graph is a linear graph without any branches


\begin_layout Subsubsection
Graph



Here I show a path graph with four vertices (see figure 
\ref{fig:create_path_graph"

\end_inset

):



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}   


\begin_layout Plain Layout


\backslash
tikzset{ 


\begin_layout Plain Layout

  VertexStyle/.append style = {draw=black,fill=white,shape=circle,text=white}


\begin_layout Plain Layout

}


\begin_layout Plain Layout


\backslash
SetGraphUnit{4}


\begin_layout Plain Layout


\backslash
Vertex{A}   


\begin_layout Plain Layout


\backslash
EA(A){B}   


\begin_layout Plain Layout


\backslash
EA(B){C}   


\begin_layout Plain Layout


\backslash
EA(C){D}   


\begin_layout Plain Layout


\backslash
Edge[](A)(B)   


\begin_layout Plain Layout


\backslash
Edge[](B)(C)   


\begin_layout Plain Layout


\backslash
Edge[](C)(D)   


\begin_layout Plain Layout


\backslash
end{tikzpicture}


\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A path graph with four vertices 
\label{fig:create_path_graph"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Function to create such a graph



To create a path graph, the following code can be used:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_path_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating a path graph as depicted in figure 
\ref{fig:create_path_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create path graph


\end_inset


\label{alg:create_path_graph"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Creating such a graph



Algorithm 
\ref{alg:create_path_graph_demo"

\end_inset

 demonstrates how to `create_k2_graph' and checks if it has the correct
 amount of edges and vertices:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_path_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `create_path_graph' 
\label{alg:create_path_graph_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .dot file produced
\label{subsec:create_path_graph.dot"

\end_inset





This graph can be converted to the .dot file as shown in algorithm 
\ref{alg:create_path_graph.dot"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_path_graph_4.dot"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the `create_path_graph' function (algorithm 
\ref{alg:create_path_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\ref{alg:save_graph_to_dot"

\end_inset


\label{alg:create_path_graph.dot"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .svg file produced
\label{subsec:create_path_graph.svg"

\end_inset





The .dot file can be converted to the .svg as shown in figure 
\ref{fig:create_path_graph.svg"

\end_inset

:



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_path_graph_4.svg

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the `create_path_graph' function (algorithm 
\ref{alg:create_path_graph"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\ref{alg:convert_dot_to_svg"

\end_inset


\label{fig:create_path_graph.svg"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
$\triangle$ Creating a Peterson graph
\label{subsec:create_petersen_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create Petersen graph


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Petersen graph, create


\end_inset





A Petersen graph is the first graph with interesting properties.


\begin_layout Subsubsection
Graph



To create a Petersen graph, one needs five vertices and five undirected
 edges, as depicted in figure 
\ref{fig:create_petersen_graph"

\end_inset

.



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Petersen_graph.svg

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A Petersen graph (from 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Petersen_graph


\end_inset

) 
\label{fig:create_petersen_graph"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Function to create such a graph



To create a Petersen graph, the following code can be used:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_petersen_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating Petersen graph as depicted in figure 
\ref{fig:create_petersen_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create Petersen graph


\end_inset


\label{alg:create_petersen_graph"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Creating such a graph



Algorithm 
\ref{alg:create_petersen_graph_demo"

\end_inset

 demonstrates how to use `create_petersen_graph' and checks if it has the
 correct amount of edges and vertices:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_petersen_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `create_k3_graph' 
\label{alg:create_petersen_graph_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .dot file produced
\label{subsec:create_petersen_graph.dot"

\end_inset





This graph can be converted to the .dot file as shown in algorithm 
\ref{alg:create_petersen_graph.dot"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_petersen_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the `create_petersen_graph' function (algorithm 
\ref{alg:create_petersen_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\ref{alg:save_graph_to_dot"

\end_inset


\label{alg:create_petersen_graph.dot"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .svg file produced
\label{subsec:create_petersen.svg"

\end_inset





This .dot file can be converted to the .svg as shown in figure 
\ref{fig:create_petersen_graph.svg"

\end_inset

:



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_petersen_graph.svg
	lyxscale 50
	scale 50

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the `create_petersen_graph' function (algorithm 
\ref{alg:create_petersen_graph"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\ref{alg:convert_dot_to_svg"

\end_inset


\label{fig:create_petersen_graph.svg"

\end_inset




\end_inset




\end_inset




\section{...}
Working on graphs without properties
\label{sec:Working-on-graphs-without-properties"

\end_inset





Now that we can build a graph, there are some things we can do.
 


\begin_layout Itemize
Getting the vertices' out degrees: see chapter 
\ref{subsec:get_vertex_out_degrees"

\end_inset




\begin_layout Itemize
Create a direct-neighbour subgraph from a vertex descriptor


\begin_layout Itemize
Create all direct-neighbour subgraphs from a graphs


\begin_layout Itemize
Saving a graph without properties to .dot file: see chapter 
\ref{subsec:save_graph_to_dot"

\end_inset




\begin_layout Itemize
Loading an undirected graph without properties from .dot file: see chapter
 
\ref{subsec:load_undirected_graph_from_dot"

\end_inset




\begin_layout Itemize
Loading a directed graph without properties from .dot file: see chapter 
\ref{subsec:load_directed_graph_from_dot"

\end_inset




\begin_layout Subsection
Getting the vertices' out degree
\label{subsec:get_vertex_out_degrees"

\end_inset





Let's measure the out degree of all vertices in a graph! 



The out degree of a vertex is the number of edges that originate at it.
 



The number of connections is called the `degree' of the vertex.
 There are three types of degrees:


\begin_layout Itemize
in degree: the number of incoming connections, using `in_degree'
\begin_inset Index idx
status open

\begin_layout Plain Layout
in_degree


\end_inset

 (not `boost::in_degree'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::in_degree does not exist


\end_inset

)


\begin_layout Itemize
out degree: the number of outgoing connections, using `out_degree'
\begin_inset Index idx
status open

\begin_layout Plain Layout
out_degree


\end_inset

 (not `boost::out_degree'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::out_degree does not exist


\end_inset

)


\begin_layout Itemize
degree: sum of the in degree and out degree, using `degree'
\begin_inset Index idx
status open

\begin_layout Plain Layout
idegree


\end_inset

 (not `boost::degree'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::degree does not exist


\end_inset

)



Algorithm 
\ref{alg:get_vertex_out_degrees"

\end_inset

 shows how to obtain these:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_out_degrees.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the vertices' out degrees
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get vertex out degrees


\end_inset


\label{alg:get_vertex_out_degrees"

\end_inset




\end_inset




\end_inset





The structure of this algorithm is similar to `get_vertex_descriptors' (algorith
m 
\ref{alg:get_vertex_descriptors"

\end_inset

), except that the out degrees from the vertex descriptors are stored.
 The out degree of a vertex iterator is obtained from the function `out_degree'
\begin_inset Index idx
status open

\begin_layout Plain Layout
out_degree


\end_inset

 (not boost::out_degree
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::out_degree does not exist


\end_inset

!).
 



Albeit that the 
\begin_inset Formula $K_{2}$
\end_inset

 graph and the two-state Markov chain are rather simple, we can use it to
 demonstrate `get_vertex_out_degrees' on, as shown in algorithm 
\ref{alg:get_vertex_out_degrees_demo"

\end_inset

.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_vertex_out_degrees_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `get_vertex_out_degrees' function
\label{alg:get_vertex_out_degrees_demo"

\end_inset




\end_inset




\end_inset





It is expected that 
\begin_inset Formula $K_{2}$
\end_inset

 has one out-degree for every vertex, where the two-state Markov chain is
 expected to have two out-degrees per vertex.


\begin_layout Subsection
$\triangle$ Is there an edge between two vertices?
\label{subsec:has_edge_between_vertices"

\end_inset





If you have two vertex descriptors, you can check if these are connected
 by an edge:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_edge_between_vertices.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Check if there exists an edge between two vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Has edge between vertices


\end_inset


\label{alg:has_edge_between_vertices"

\end_inset




\end_inset




\end_inset





This code uses the function `edge'
\begin_inset Index idx
status open

\begin_layout Plain Layout
edge


\end_inset

 (not boost::edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge does not exist


\end_inset

: it returns a pair consisting of an edge descriptor and a boolean indicating
 if it is a valid edge descriptor.
 The boolean will be true if there exists an edge between the two vertices
 and false if not.



The demo shows that there is an edge between the two vertices of a 
\begin_inset Formula $K_{2}$
\end_inset

 graph, but there are no self-loops (edges that original and end at the
 same vertex).



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_edge_between_vertices_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `has_edge_between_vertices' function
\label{alg:has_edge_between_vertices_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
$\triangle$ Get the edge between two vertices
\label{subsec:get_edge_between_vertices"

\end_inset





If you have two vertex descriptors, you can use these to find the edge between
 them.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_between_vertices.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the edge between two vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get edge between vertices


\end_inset


\label{alg:get_edge_between_vertices"

\end_inset




\end_inset




\end_inset





This code does assume that there is an edge between the two vertices.



The demo shows how to get the edge between two vertices, deleting it, and
 checking for success.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_edge_between_vertices_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `get_edge_between_vertices' function
\label{alg:get_edge_between_vertices_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
$\triangle$$\triangle$ Create a direct-neighbour subgraph from a vertex descriptor
\label{subsec:create_direct_neighbour_subgraph"

\end_inset





Suppose you have a vertex of interest its vertex descriptor.
 Let's say you want to get a subgraph of that vertex and its direct neighbours
 only.
 This means that all vertices of that subgraph are adjacent vertices and
 that the edges go either from focal vertex to its neighbours, or from adjacent
 vertex to adjacent neighbour.



Here is the `create_direct_neighbour_subgraph' code:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_direct_neighbour_subgraph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the direct-neighbour subgraph from a vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create direct-neighbour subgraph


\end_inset


\label{alg:create_direct_neighbour_subgraph"

\end_inset




\end_inset




\end_inset





This demonstration code shows that the direct-neighbour graph of each vertex
 of a 
\begin_inset Formula $K_{2}$
\end_inset

 graphs is ...
 a 
\begin_inset Formula $K_{2}$
\end_inset

 graph!



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_direct_neighbour_subgraph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `create_direct_neighbour_subgraph' function
\label{alg:create_direct_neighbour_subgraph_demo"

\end_inset




\end_inset




\end_inset





Note that this algorithm works on both undirected and directional graphs.
 If the graph is directional, only the out edges will be copied.
 To also copy the vertices connected with inward edges, use 
\ref{subsec:create_direct_neighbour_subgraph_including_in_edges"

\end_inset




\begin_layout Subsection
$\triangle$$\triangle$ Create a direct-neighbour subgraph from a vertex descriptor including
 inward edges
\label{subsec:create_direct_neighbour_subgraph_including_in_edges"

\end_inset





Too bad, this algorithm does not work yet.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_direct_neighbour_subgraph_including_in_edges.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the direct-neighbour subgraph from a vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create direct-neighbour subgraph_including_in_edges


\end_inset


\label{alg:create_direct_neighbour_subgraph_including_in_edges"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
$\triangle$$\triangle$ Creating all direct-neighbour subgraphs from a graph without properties
\label{subsec:create_all_direct_neighbour_subgraphs"

\end_inset





Using the previous function, it is easy to create all direct-neighbour subgraphs
 from a graph without properties:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_all_direct_neighbour_subgraphs.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Create all direct-neighbour subgraphs from a graph without properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create all direct-neighbour subgraphs


\end_inset


\label{alg:create_all_direct_neighbour_subgraphs"

\end_inset




\end_inset




\end_inset





This demonstration code shows that all two direct-neighbour graphs of a
 
\begin_inset Formula $K_{2}$
\end_inset

 graphs are ...
 
\begin_inset Formula $K_{2}$
\end_inset

 graphs!



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_all_direct_neighbour_subgraphs_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `create_all_direct_neighbour_subgraphs' function
\label{alg:create_all_direct_neighbour_subgraphs_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
$\triangle$ Are two graphs isomorphic?
\label{subsec:is_isomorphic"

\end_inset





You may want to check if two graphs are isomorphic.
 That is: if they have the same shape.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "is_isomorphic.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Check if two graphs are isomorphic
\begin_inset Index idx
status open

\begin_layout Plain Layout
Is isomorphic


\end_inset


\label{alg:is_isomorphic"

\end_inset




\end_inset




\end_inset





This demonstration code shows that a 
\begin_inset Formula $K_{3}$
\end_inset

 graph is not equivalent to a 3-vertices path graph:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "is_isomorphic_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `is_isomorphic' function
\label{alg:is_isomorphic_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
$\triangle$$\triangle$ Count the number of connected components in an directed graph
\label{subsec:count_directed_graph_connected_components"

\end_inset





A directed graph may consist out of two components, that are connected within
 each, but unconnected between them.
 Take for example, a graph of two isolated edges, with four vertices.
 



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 


\begin_layout Plain Layout


\backslash
draw[thick] 


\begin_layout Plain Layout

  (0,0) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

    -> (5,2) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

    -> (3,4) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

    -> (0,0) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

(6,0) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

    -> (10,2) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

    -> (8,4) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

    -> (6,0) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

;


\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Example of a directed graph with two components
\label{fig:count_directed_graph_connected_components"

\end_inset




\end_inset




\end_inset





This algorithm counts the number of connected components:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "count_directed_graph_connected_components.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Count the number of connected components
\begin_inset Index idx
status open

\begin_layout Plain Layout
Count connected components


\end_inset


\label{alg:count_directed_graph_connected_components"

\end_inset




\end_inset




\end_inset





The complexity of this algorithm is 
\begin_inset Formula $O(\left|V\right|+\left|E\right|)$
\end_inset

.



This demonstration code shows that two solitary edges are correctly counted
 as being two components:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "count_directed_graph_connected_components_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `count_directed_graph_connected_components' function
\label{alg:count_directed_graph_connected_components_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
$\triangle$$\triangle$ Count the number of connected components in an undirected graph
\label{subsec:count_undirected_graph_connected_components"

\end_inset





An undirected graph may consist out of two components, that are connect
 within each, but unconnected between them.
 Take for example, a graph of two isolated edges, with four vertices.
 



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 


\begin_layout Plain Layout


\backslash
draw[thick] 


\begin_layout Plain Layout

  (0,0) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

    -- (5,2) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

(6,0) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

    -- (10,2) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

;


\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Example of an undirected graph with two components
\label{fig:count_undirected_graph_connected_components"

\end_inset




\end_inset




\end_inset





This algorithm counts the number of connected components:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "count_undirected_graph_connected_components.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Count the number of connected components
\begin_inset Index idx
status open

\begin_layout Plain Layout
Count connected components


\end_inset


\label{alg:count_undirected_graph_connected_components"

\end_inset




\end_inset




\end_inset





The complexity of this algorithm is 
\begin_inset Formula $O(\left|V\right|+\left|E\right|)$
\end_inset

.



This demonstration code shows that two solitary edges are correctly counted
 as being two components:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "count_undirected_graph_connected_components_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `count_undirected_graph_connected_components' function
\label{alg:count_undirected_graph_connected_components_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
$\triangle$$\triangle$ Count the number of levels in an undirected graph
\label{subsec:count_undirected_graph_levels"

\end_inset





Graphs can have a hierarchical structure.
 From a starting vertex, the number of levels can be counted.
 A graph of one vertex has zero levels.
 A graph with one edge has one level.
 A linear graph of three vertices and two edges has one or two levels, depending
 on the starting vertex.



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 


\begin_layout Plain Layout


\backslash
draw[thick] 


\begin_layout Plain Layout

  (0,0) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

    -- (5,2) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

(6,0) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

    -- (10,2) node[draw=black,fill=white,shape=circle,text=white] {} 


\begin_layout Plain Layout

;


\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Example of an undirected graph with two components
\label{fig:count_undirected_graph_levels"

\end_inset




\end_inset




\end_inset





This algorithm counts the number of levels in an undirected graph, starting
 at a certain vertex.
 



It does so, by collecting the neighbours of the traversed vertices.
 Each sweep, all neighbours of traversed neighbours are added to a set of
 known vertices.
 As long as vertices can be added, the algorithm continues.
 If no vertices can be added, the number of level equals the number of sweeps.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "count_undirected_graph_levels.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Count the number of levels in an undirected graph 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Count undirected graph levels


\end_inset


\label{alg:count_undirected_graph_levels"

\end_inset




\end_inset




\end_inset





This demonstration code shows the number of levels from a certain vertex,
 while adding edges to form a linear graph.
 The vertex, when still without edges, has zero levels.
 After adding one edge, the graph has one level, etc.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "count_undirected_graph_levels_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `count_undirected_graph_levels' function
\label{alg:count_undirected_graph_levels_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Saving a graph to a .dot file
\label{subsec:save_graph_to_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph as .dot


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create .dot from graph


\end_inset

 



Graph are easily saved to a file, thanks to Graphviz.
 Graphviz
\begin_inset Index idx
status open

\begin_layout Plain Layout
Graphviz


\end_inset

 (short for Graph Visualization Software) is a package of open-source tools
 for drawing graphs.
 It uses the DOT language for describing graphs, and these are commonly
 stored in (plain-text) .dot files (I show .dot file of every non-empty graph
 created, e.g.
 chapters 
\ref{subsec:create_markov_chain.dot"

\end_inset

 and 
\ref{subsec:create_k2.dot"

\end_inset

)



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_graph_to_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Saving a graph to a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph to dot


\end_inset


\label{alg:save_graph_to_dot"

\end_inset




\end_inset




\end_inset





All the code does is create an std::ofstream
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::ofstream


\end_inset

 (an output-to-file stream) and use boost::write_graphviz
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::write_graphviz


\end_inset

 to write the DOT description of our graph to that stream.
 Instead of `std::ofstream', one could use std::cout
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::cout


\end_inset

 (a related output stream) to display the DOT language on screen directly.



Algorithm 
\ref{alg:save_graph_to_dot_demo"

\end_inset

 shows how to use the `save_graph_to_dot' function:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_graph_to_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `save_graph_to_dot' function
\label{alg:save_graph_to_dot_demo"

\end_inset




\end_inset




\end_inset





When using the `save_graph_to_dot' function (algorithm 
\ref{alg:save_graph_to_dot"

\end_inset

), only the structure of the graph is saved: all other properties like names
 are not stored.
 Algorithm 
\ref{alg:save_named_vertices_graph_to_dot"

\end_inset

 shows how to do so.


\begin_layout Subsection
Loading a directed graph from a .dot
\label{subsec:load_directed_graph_from_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed graph from .dot


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create directed graph from .dot


\end_inset

 



When loading a graph from file, one needs to specify a type of graph.
 In this example, an directed graph is loaded, as shown in algorithm 
\ref{alg:load_directed_graph_from_dot"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Loading a directed graph from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed graph from dot


\end_inset


\label{alg:load_directed_graph_from_dot"

\end_inset




\end_inset




\end_inset





In this algorithm, first it is checked if the file to load exists, using
 the `is_regular_file' function (algorithm 
\ref{alg:is_regular_file"

\end_inset

), after which an std::ifstream
\begin_inset Index idx
status open

\begin_layout Plain Layout
std::ifstream


\end_inset

 is opened.
 Then an empty directed graph is created, which saves us writing down the
 template arguments explicitly.
 Then, a boost::dynamic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties


\end_inset

 is created with the `boost::ignore_other_properties'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::ignore_other_properties


\end_inset

 in its constructor (using a default constructor here results in the run-time
 error `property not found: node_id', see chapter 
\ref{subsec:property_not_found_node_id"

\end_inset

).
 From this and the empty graph, `boost::read_graphviz'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz


\end_inset

 is called to build up the graph.



Algorithm 
\ref{alg:load_directed_graph_from_dot_demo"

\end_inset

 shows how to use the `load_directed_graph_from_dot' function:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `load_directed_graph_from_dot' function
\label{alg:load_directed_graph_from_dot_demo"

\end_inset




\end_inset




\end_inset





This demonstration shows how the Markov chain is created using the `create_marko
v_chain_graph' function (algorithm 
\ref{alg:create_markov_chain_graph"

\end_inset

), saved and then loaded.
 The loaded graph is then checked to be a two-state Markov chain.


\begin_layout Subsection
Loading an undirected graph from a .dot file
\label{subsec:load_undirected_graph_from_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected graph from .dot


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create undirected graph from .dot


\end_inset

 



Loading an undirected graph from a .dot file is very similar to loading a
 directed graph from a .dot file, as shown in chapter 
\ref{subsec:load_directed_graph_from_dot"

\end_inset

.
 Algorithm 
\ref{alg:load_undirected_graph_from_dot"

\end_inset

 show how to do so:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Loading an undirected graph from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected graph from_dot


\end_inset


\label{alg:load_undirected_graph_from_dot"

\end_inset




\end_inset




\end_inset





The only difference with loading a directed graph, is that the initial empty
 graph is undirected instead.
 Chapter 
\ref{subsec:load_directed_graph_from_dot"

\end_inset

 describes the rationale of this function.
 



Algorithm 
\ref{alg:load_undirected_graph_from_dot_demo"

\end_inset

 shows how to use the `load_undirected_graph_from_dot' function:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `load_undirected_graph_from_dot' function
\label{alg:load_undirected_graph_from_dot_demo"

\end_inset




\end_inset




\end_inset





This demonstration shows how the 
\begin_inset Formula $K_{2}$
\end_inset

 graph is created using the `create_k2_graph' function (algorithm 
\ref{alg:create_k2_graph"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be a 
\begin_inset Formula $K_{2}$
\end_inset

 graph.


\section{...}
Building graphs with bundled vertices
\label{sec:Building-graphs-with-bundled-vertices"

\end_inset





Up until now, the graphs created have had edges and vertices without any
 properties.
 In this chapter, graphs will be created, in which the vertices can have
 a bundled `my_bundled_vertex' type
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
I do not intend to be original in naming my data types


\end_inset

.
 The following graphs will be created:


\begin_layout Itemize
An empty directed graph that allows for bundled vertices: see chapter 
\ref{alg:create_empty_directed_bundled_vertices_graph"

\end_inset




\begin_layout Itemize
An empty undirected graph that allows for bundled vertices: see chapter
 
\ref{subsec:create_empty_directed_bundled_vertices_graph"

\end_inset




\begin_layout Itemize
A two-state Markov chain with bundled vertices: see chapter 
\ref{subsec:create_bundled_vertices_markov_chain"

\end_inset




\begin_layout Itemize
\begin_inset Formula $K_{2}$
\end_inset

with bundled vertices: see chapter 
\ref{subsec:create_bundled_vertices_k2_graph"

\end_inset





In the process, some basic (sometimes bordering trivial) functions are shown:


\begin_layout Itemize
Create the vertex class, called `my_bundled_vertex': see chapter 
\ref{subsec:my_bundled_vertex"

\end_inset




\begin_layout Itemize
Adding a `my_bundled_vertex': see chapter 
\ref{subsec:add_bundled_vertex"

\end_inset




\begin_layout Itemize
Getting the vertices `my_bundled_vertex'-es: see chapter 
\ref{subsec:get_bundled_vertex_my_vertexes"

\end_inset





These functions are mostly there for completion and showing which data types
 are used.


\begin_layout Subsection
Creating the bundled vertex class
\label{subsec:my_bundled_vertex"

\end_inset





Before creating an empty graph with bundled vertices, that bundled vertex
 class must be created.
 In this tutorial, it is called `my_bundled_vertex'.
 `my_bundled_vertex' is a class that is nonsensical, but it can be replaced
 by any other class type.



Here I will show the header file of `my_bundled_vertex', as the implementation
 of it is not important:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "my_bundled_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Declaration of my_bundled_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_vertex


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_vertex.h


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_vertex declaration


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Declaration, my_bundled_vertex 


\end_inset


\label{alg:my_bundled_vertex_h"

\end_inset




\end_inset




\end_inset





`my_bundled_vertex' is a class that has multiple properties: 


\begin_layout Itemize
It has four public member variables: the double `m_x' (`m_
\begin_inset Index idx
status open

\begin_layout Plain Layout
m_


\end_inset

' stands for member
\begin_inset Index idx
status open

\begin_layout Plain Layout
member


\end_inset

), the double `m_y', the std::string m_name and the std::string m_description.
 These variables must be public


\begin_layout Itemize
It has a default constructor


\begin_layout Itemize
It is copyable


\begin_layout Itemize
It is comparable for equality (it has operator==), which is needed for searching



`my_bundled_vertex' does not have to have the stream operators defined for
 file I/O, as this goes via the public member variables.


\begin_layout Subsection
Create the empty directed graph with bundled vertices
\label{subsec:create_empty_directed_bundled_vertices_graph"

\end_inset





\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_bundled_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating an empty directed graph with bundled vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty directed bundled vertices graph


\end_inset


\label{alg:create_empty_directed_bundled_vertices_graph"

\end_inset




\end_inset




\end_inset





This graph:


\begin_layout Itemize
has its out edges stored in a std::vector (due to the first boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS


\end_inset

)


\begin_layout Itemize
has its vertices stored in a std::vector (due to the second boost::vecS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS


\end_inset

)


\begin_layout Itemize
is directed (due to the boost::directedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::directedS


\end_inset

)


\begin_layout Itemize
The vertices have one property: they have a bundled type, that is of data
 type `my_bundled_vertex'


\begin_layout Itemize
The edges and graph have no properties


\begin_layout Itemize
Edges are stored in a std::list



The boost::adjacency_list has a new, fourth template argument `my_bundled_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_vertex


\end_inset

'.
 This can be read as: 
\begin_inset Quotes eld
\end_inset

vertices have the bundled property `my_bundled_vertex'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

vertices have a bundled type called my_bundled_vertex
\begin_inset Quotes erd
\end_inset

.


\begin_layout Subsection
Create the empty undirected graph with bundled vertices
\label{subsec:create_empty_undirected_bundled_vertices_graph"

\end_inset





\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_bundled_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating an empty undirected graph with bundled vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty undirected bundled vertices graph


\end_inset


\label{alg:create_empty_undirected_bundled_vertices_graph"

\end_inset




\end_inset




\end_inset





This code is very similar to the code described in chapter 
\ref{subsec:create_empty_directed_bundled_vertices_graph"

\end_inset

, except that the directness (the third template argument) is undirected
 (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS


\end_inset

).


\begin_layout Subsection
Add a bundled vertex
\label{subsec:add_bundled_vertex"

\end_inset





Adding a bundled vertex is very similar to adding a named vertex (chapter
 
\ref{subsec:add_named_vertex"

\end_inset

).



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_bundled_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Add a bundled vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
Add bundled vertex


\end_inset


\label{alg:add_bundled_vertex"

\end_inset




\end_inset




\end_inset





When having added a new (abstract) vertex to the graph, the vertex descriptor
 is used to set the `my_bundled_vertex' in the graph.


\begin_layout Subsection
Getting the bundled vertices' my_vertexes
\begin_inset Foot
status open

\begin_layout Plain Layout
the name `my_vertexes' is chosen to indicate this function returns a container
 of my_vertex


\end_inset


\label{subsec:get_bundled_vertex_my_vertexes"

\end_inset





When the vertices of a graph have any bundled `my_bundled_vertex', one can
 extract these as such:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_my_bundled_vertexes.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the bundled vertices' my_vertexes
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get bundled vertex my_vertexes


\end_inset


\label{alg:get_my_bundled_vertexes"

\end_inset




\end_inset




\end_inset





The `my_bundled_vertex' bundled in each vertex is obtained from a vertex
 descriptor and then put into a std::vector.



The order of the `my_bundled_vertex' objects may be different after saving
 and loading.



When trying to get the vertices' my_bundled_vertex from a graph without
 these, you will get the error `formed reference to void' (see chapter 
\ref{subsec:formed_reference_to_void"

\end_inset

).


\begin_layout Subsection
Creating a two-state Markov chain with bundled vertices
\label{subsec:create_bundled_vertices_markov_chain"

\end_inset




\begin_layout Subsubsection
Graph



Figure 
\ref{fig:bundled_vertices_markov_chain"

\end_inset

 shows the graph that will be reproduced:



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=4cm, semithick
]   


\begin_layout Plain Layout

  
\backslash
tikzstyle{every state}=[]


\begin_layout Plain Layout

  
\backslash
node[state] (A) 


\begin_layout Plain Layout

    {Sunny, Yellow, 1.0, 2.0};   


\begin_layout Plain Layout

  
\backslash
node[state] (B) [right of=A] 


\begin_layout Plain Layout

    {Not rainy, Not grey, 3.0, 4.0}


\begin_layout Plain Layout

  ;   


\begin_layout Plain Layout

  
\backslash
path (A) edge [loop  left] node {} (A)


\begin_layout Plain Layout

        (A) edge [bend  left] node {} (B)


\begin_layout Plain Layout

        (B) edge [bend  left] node {} (A)


\begin_layout Plain Layout

        (B) edge [loop right] node {} (B); 


\begin_layout Plain Layout


\backslash
end{tikzpicture}


\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A two-state Markov chain where the vertices have bundled properties and
 the edges have no properties.
 The vertices' properties are nonsensical
\label{fig:bundled_vertices_markov_chain"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Function to create such a graph



Here is the code creating a two-state Markov chain with bundled vertices:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_vertices_markov_chain.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating the two-state Markov chain as depicted in figure 
\ref{fig:bundled_vertices_markov_chain"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create bundled vertices Markov chain


\end_inset


\label{alg:create_bundled_vertices_markov_chain"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Creating such a graph



Here is the demo:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_vertices_markov_chain_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `create_bundled_vertices_markov_chain' function (algorithm 
\ref{alg:create_bundled_vertices_markov_chain"

\end_inset

)
\label{alg:create_bundled_and_vertices_markov_chain_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .dot file produced



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_bundled_vertices_markov_chain.dot"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the `create_bundled_vertices_markov_chain' function
 (algorithm 
\ref{alg:create_bundled_vertices_markov_chain"

\end_inset

), converted from graph to .dot file using algorithm 
\ref{alg:save_bundled_vertices_graph_to_dot"

\end_inset


\label{alg:create_bundled_vertices_markov_chain.dot"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .svg file produced



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_bundled_vertices_markov_chain.svg

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the `create_bundled_vertices_markov_chain' function
 (algorithm 
\ref{alg:create_bundled_vertices_markov_chain"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\ref{alg:convert_dot_to_svg"

\end_inset


\label{fig:create_bundled_vertices_markov_chain.svg"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 with bundled vertices
\label{subsec:create_bundled_vertices_k2_graph"

\end_inset




\begin_layout Subsubsection
Graph



We reproduce the 
\begin_inset Formula $K_{2}$
\end_inset

 with named vertices of chapter 
\ref{subsec:create_named_vertices_k2_graph"

\end_inset

 , but with our bundled vertices instead, as show in figure 
\ref{fig:bundled_vertices_k2_graph"

\end_inset

:



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[>=stealth',shorten >=1pt,auto,node distance=4cm, semithick]
   


\begin_layout Plain Layout


\backslash
tikzstyle{every state}=[]


\begin_layout Plain Layout


\backslash
node[state] (A)              {Me,Myself,1.0,2.0};   


\begin_layout Plain Layout


\backslash
node[state] (B) [right of=A] {My computer,Not me,3.0,4.0};   


\begin_layout Plain Layout


\backslash
path (A) edge [] node {} (B); 


\begin_layout Plain Layout


\backslash
end{tikzpicture}


\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $K_{2}$
\end_inset

: a fully connected graph with two bundled vertices
\label{fig:bundled_vertices_k2_graph"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Function to create such a graph



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_vertices_k2_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{2}$
\end_inset

 as depicted in figure 
\ref{fig:named_vertices_k2_graph"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create bundled vertices K2 graph


\end_inset


\label{alg:create_bundled_vertices_k2_graph"

\end_inset




\end_inset




\end_inset





Most of the code is a slight modification of the `create_named_vertices_k2_graph
' function (algorithm 
\ref{alg:create_named_vertices_k2_graph"

\end_inset

).
 In the end, (references to) the my_bundled_vertices are obtained and set
 with two bundled my_bundled_vertex objects.


\begin_layout Subsubsection
Creating such a graph



Demo:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_vertices_k2_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `create_bundled_vertices_k2_graph' function (algorithm 
\ref{alg:create_bundled_vertices_k2_graph"

\end_inset

)
\label{alg:create_bundled_vertices_k2_graph_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .dot file produced



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_bundled_vertices_k2_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the `create_bundled_vertices_k2_graph' function (algorithm
 
\ref{alg:create_bundled_vertices_k2_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\ref{alg:save_graph_to_dot"

\end_inset


\label{alg:create_bundled_vertices_k2_graph.dot-1"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .svg file produced



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_bundled_vertices_k2_graph.svg

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the `create_bundled_vertices_k2_graph' function (algorithm
 
\ref{alg:create_bundled_vertices_k2_graph"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\ref{alg:convert_dot_to_svg"

\end_inset


\label{fig:create_bundled_vertices_k2_graph.svg"

\end_inset




\end_inset




\end_inset




\section{...}
Working on graphs with bundled vertices
\label{sec:Working-on-graphs-with-bundled-vertices"

\end_inset





When using graphs with bundled vertices, their state gives a way to find
 a vertex and working with it.
 This chapter shows some basic operations on graphs with bundled vertices.


\begin_layout Itemize
Check if there exists a vertex with a certain `my_bundled_vertex': chapter
 
\ref{subsec:has_bundled_vertex_with_my_vertex"

\end_inset




\begin_layout Itemize
Find a vertex with a certain `my_bundled_vertex': chapter 
\ref{subsec:find_bundled_vertex_with_my_vertex"

\end_inset




\begin_layout Itemize
Get a vertex its `my_bundled_vertex' from its vertex descriptor: chapter
 
\ref{subsec:get_bundled_vertex_my_vertex"

\end_inset




\begin_layout Itemize
Set a vertex its `my_bundled_vertex' using its vertex descriptor: chapter
 
\ref{subsec:set_bundled_vertex_my_vertex"

\end_inset




\begin_layout Itemize
Setting all vertices their `my_bundled_vertex'-es: chapter 
\ref{subsec:set_bundled_vertex_my_vertexes"

\end_inset




\begin_layout Itemize
Storing an directed/undirected graph with bundled vertices as a .dot file:
 chapter 
\ref{subsec:save_bundled_vertices_graph_to_dot"

\end_inset




\begin_layout Itemize
Loading a directed graph with bundled vertices from a .dot file: chapter
 
\ref{subsec:load_directed_bundled_vertices_graph_from_dot"

\end_inset




\begin_layout Itemize
Loading an undirected directed graph with bundled vertices from a .dot file:
 chapter 
\ref{subsec:load_undirected_bundled_vertices_graph_from_dot"

\end_inset




\begin_layout Subsection
Has a bundled vertex with a my_bundled_vertex
\label{subsec:has_bundled_vertex_with_my_vertex"

\end_inset





Before modifying our vertices, let's first determine if we can find a vertex
 by its bundled type (`my_bundled_vertex') in a graph.
 After obtain the vertex iterators, we can dereference each these to obtain
 the vertex descriptors and then compare each vertex its `my_bundled_vertex'
 with the one desired.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_bundled_vertex_with_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Find if there is vertex with a certain my_bundled_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
Has bundled vertex with my_vertex


\end_inset


\label{alg:has_bundled_vertex_with_my_vertex"

\end_inset




\end_inset




\end_inset





This function can be demonstrated as in algorithm 
\ref{alg:has_bundled_vertex_with_my_vertex_demo"

\end_inset

, where a certain my_bundled_vertex cannot be found in an empty graph.
 After adding the desired my_bundled_vertex, it is found.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_bundled_vertex_with_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `has_bundled_vertex_with_my_vertex' function
\label{alg:has_bundled_vertex_with_my_vertex_demo"

\end_inset




\end_inset




\end_inset





Note that this function only finds if there is at least one bundled vertex
 with that my_bundled_vertex: it does not tell how many bundled vertices
 with that my_bundled_vertex exist in the graph.


\begin_layout Subsection
Find a bundled vertex with a certain my_bundled_vertex
\label{subsec:find_bundled_vertex_with_my_vertex"

\end_inset





Where STL functions work with iterators, here we obtain a vertex descriptor
 (see chapter 
\ref{subsec:Vertex-descriptors"

\end_inset

) to obtain a handle to the desired vertex.
 Algorithm 
\ref{alg:find_first_bundled_vertex_with_my_vertex"

\end_inset

 shows how to obtain a vertex descriptor to the first vertex found with
 a specific `my_bundled_vertex' value.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_bundled_vertex_with_my_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Find the first vertex with a certain my_bundled_vertex
\begin_inset Index idx
status open

\begin_layout Plain Layout
Find first bundled vertex with my_vertex


\end_inset


\label{alg:find_first_bundled_vertex_with_my_vertex"

\end_inset




\end_inset




\end_inset





With the vertex descriptor obtained, one can read and modify the vertex
 and the edges surrounding it.
 Algorithm 
\ref{alg:find_first_bundled_vertex_with_my_vertex_demo"

\end_inset

 shows some examples of how to do so.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_bundled_vertex_with_my_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `find_first_bundled_vertex_with_my_vertex' function
\label{alg:find_first_bundled_vertex_with_my_vertex_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Get a bundled vertex its `my_bundled_vertex'
\label{subsec:get_bundled_vertex_my_vertex"

\end_inset





To obtain the `my_bundled_vertex' from a vertex descriptor is simple:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_my_bundled_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get a bundled vertex its my_vertex from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get bundled vertex my_bundled_vertex


\end_inset


\label{alg:get_bundled_vertex_my_vertex"

\end_inset




\end_inset




\end_inset





One can just use the graph as a property map and let it be looked-up.



To use `get_bundled_vertex_my_vertex', one first needs to obtain a vertex
 descriptor.
 Algorithm 
\ref{alg:get_bundled_vertex_my_vertex_demo"

\end_inset

 shows a simple example.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_my_bundled_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration if the `get_bundled_vertex_my_vertex' function
\label{alg:get_bundled_vertex_my_vertex_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Set a bundled vertex its my_vertex
\label{subsec:set_bundled_vertex_my_vertex"

\end_inset





If you know how to get the `my_bundled_vertex' from a vertex descriptor,
 setting it is just as easy, as shown in algorithm 
\ref{alg:set_bundled_vertex_my_vertex"

\end_inset

.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_my_bundled_vertex.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Set a bundled vertex its my_vertex from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set vertex my_vertex


\end_inset


\label{alg:set_bundled_vertex_my_vertex"

\end_inset




\end_inset




\end_inset





To use `set_bundled_vertex_my_vertex', one first needs to obtain a vertex
 descriptor.
 Algorithm 
\ref{alg:set_bundled_vertex_my_vertex_demo"

\end_inset

 shows a simple example.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_my_bundled_vertex_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration if the `set_bundled_vertex_my_vertex' function
\label{alg:set_bundled_vertex_my_vertex_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Setting all bundled vertices' my_vertex objects
\label{subsec:set_bundled_vertex_my_vertexes"

\end_inset





When the vertices of a graph are `my_bundled_vertex' objects, one can set
 these as such:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_my_bundled_vertexes.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Setting the bundled vertices' `my_bundled_vertex'-es
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set bundled vertex my_bundled_vertexes


\end_inset


\label{alg:set_bundled_vertex_my_vertexes"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Storing a graph with bundled vertices as a .dot
\label{subsec:save_bundled_vertices_graph_to_dot"

\end_inset





If you used the `create_bundled_vertices_k2_graph' function (algorithm 
\ref{alg:create_bundled_vertices_k2_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{2}$
\end_inset

 graph with vertices associated with `my_bundled_vertex' objects, you can
 store these with algorithm 
\ref{alg:save_bundled_vertices_graph_to_dot"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_bundled_vertices_graph_to_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Storing a graph with bundled vertices as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save bundled vertices graph to dot


\end_inset


\label{alg:save_bundled_vertices_graph_to_dot"

\end_inset




\end_inset




\end_inset





This code looks small, because we call the `make_bundled_vertices_writer'
 function, which is shown in algorithm 
\ref{alg:make_bundled_vertices_writer"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "make_bundled_vertices_writer.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The `make_bundled_vertices_writer' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
make_bundled_vertices_writer


\end_inset


\label{alg:make_bundled_vertices_writer"

\end_inset




\end_inset




\end_inset





Also this function is forwarding the real work to the `bundled_vertices_writer',
 shown in algorithm 
\ref{alg:bundled_vertices_writer"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "bundled_vertices_writer.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The `bundled_vertices_writer' function
\begin_inset Index idx
status open

\begin_layout Plain Layout
bundled_vertices_writer


\end_inset


\label{alg:bundled_vertices_writer"

\end_inset




\end_inset




\end_inset





Here, some interesting things are happening: the writer needs the bundled
 property maps to work with and thus copies the whole graph to its internals.
 I have chosen to map the `my_bundled_vertex' member variables to Graphviz
 attributes (see chapter 
\ref{subsec:Graphviz-attributes"

\end_inset

 for most Graphviz attributes) as shown in table 
\ref{tab:Mapping-of-my_bundled_vertex-to-Graphviz-attributes"

\end_inset

:



\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
my_bundled_vertex variable


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C++ data type


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Graphviz data type


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Graphviz attribute


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m_name


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std::string


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
label


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m_description


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
std::string


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
comment


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m_x


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
double


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
double


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
width


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m_y


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
double


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
double


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
height


\end_inset
</cell>
</row>
</lyxtabular>

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Mapping of my_bundled_vertex member variable and Graphviz attributes
\label{tab:Mapping-of-my_bundled_vertex-to-Graphviz-attributes"

\end_inset




\end_inset




\end_inset





Important in this mapping is that the C++ and the Graphviz data types match.
 I also chose attributes that matched as closely as possible.



The writer also encodes the std::string of the name and description to a
 Graphviz-friendly format.
 When loading the .dot file again, this will have to be undone again.


\begin_layout Subsection
Loading a directed graph with bundled vertices from a .dot
\label{subsec:load_directed_bundled_vertices_graph_from_dot"

\end_inset





When loading a graph from file, one needs to specify a type of graph.
 In this example, an directed graph with bundled vertices is loaded, as
 shown in algorithm 
\ref{alg:load_directed_bundled_vertices_graph_from_dot"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_bundled_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Loading a directed graph with bundled vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed bundled vertices graph from dot


\end_inset


\label{alg:load_directed_bundled_vertices_graph_from_dot"

\end_inset




\end_inset




\end_inset





In this algorithm, first it is checked if the file to load exists.
 Then an empty directed graph is created, to save typing the typename explicitly.



Then a boost::dynamic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties


\end_inset

 is created with its default constructor, after which we set it to follow
 the same mapping as in the previous chapter.
 From this and the empty graph, `boost::read_graphviz'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz


\end_inset

 is called to build up the graph.



At the moment the graph is created, all `my_bundled_vertex' their names
 and description are in a Graphviz-friendly format.
 By obtaining all vertex iterators and vertex descriptors, the encoding
 is made undone.



Algorithm 
\ref{alg:load_directed_bundled_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the `load_directed_bundled_vertices_graph_from_dot' function:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_bundled_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `load_directed_bundled_vertices_graph_from_dot' function
\label{alg:load_directed_bundled_vertices_graph_from_dot_demo"

\end_inset




\end_inset




\end_inset





This demonstration shows how the Markov chain is created using the `create_bundl
ed_vertices_markov_chain' function (algorithm 
\ref{alg:create_bundled_vertices_markov_chain"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be the same as the original.


\begin_layout Subsection
Loading an undirected graph with bundled vertices from a .dot
\label{subsec:load_undirected_bundled_vertices_graph_from_dot"

\end_inset





When loading a graph from file, one needs to specify a type of graph.
 In this example, an undirected graph with bundled vertices is loaded, as
 shown in algorithm 
\ref{alg:load_undirected_bundled_vertices_graph_from_dot"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_bundled_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Loading an undirected graph with bundled vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected bundled vertices graph from dot


\end_inset


\label{alg:load_undirected_bundled_vertices_graph_from_dot"

\end_inset




\end_inset




\end_inset





The only difference with loading a directed graph, is that the initial empty
 graph is undirected instead.
 Chapter 
\ref{subsec:load_directed_bundled_vertices_graph_from_dot"

\end_inset

 describes the rationale of this function.
 



Algorithm 
\ref{alg:load_undirected_bundled_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the `load_undirected_bundled_vertices_graph_from_dot'
 function:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_bundled_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `load_undirected_bundled_vertices_graph_from_dot' function
\label{alg:load_undirected_bundled_vertices_graph_from_dot_demo"

\end_inset




\end_inset




\end_inset





This demonstration shows how 
\begin_inset Formula $K_{2}$
\end_inset

 with bundled vertices is created using the `create_bundled_vertices_k2_graph'
 function (algorithm 
\ref{alg:create_bundled_vertices_k2_graph"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be the same as the original.


\section{...}
Building graphs with bundled edges and vertices



Up until now, the graphs created have had only bundled vertices.
 In this chapter, graphs will be created, in which both the edges and vertices
 have a bundled `my_bundled_edge' and `my_bundled_edge' type
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
I do not intend to be original in naming my data types


\end_inset

.


\begin_layout Itemize
An empty directed graph that allows for bundled edges and vertices: see
 chapter 
\ref{subsec:create_empty_directed_bundled_edges_and_vertices_graph"

\end_inset




\begin_layout Itemize
An empty undirected graph that allows for bundled edges and vertices: see
 chapter 
\ref{subsec:create_empty_undirected_bundled_edges_and_vertices_graph"

\end_inset




\begin_layout Itemize
A two-state Markov chain with bundled edges and vertices: see chapter 
\ref{subsec:create_bundled_edges_and_vertices_markov_chain"

\end_inset




\begin_layout Itemize
\begin_inset Formula $K_{3}$
\end_inset

with bundled edges and vertices: see chapter 
\ref{subsec:create_bundled_edges_and_vertices_k3"

\end_inset





In the process, some basic (sometimes bordering trivial) functions are shown:


\begin_layout Itemize
Creating the `my_bundled_edge' class: see chapter 
\ref{subsec:my_bundled_edge"

\end_inset




\begin_layout Itemize
Adding a bundled `my_bundled_edge': see chapter 
\ref{subsec:add_bundled_edge"

\end_inset





These functions are mostly there for completion and showing which data types
 are used.


\begin_layout Subsection
Creating the bundled edge class
\label{subsec:my_bundled_edge"

\end_inset





In this example, I create a `my_bundled_edge' class.
 Here I will show the header file of it, as the implementation of it is
 not important yet.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "my_bundled_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Declaration of my_bundled_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_edge


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_edge.h


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_bundled_edge declaration


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Declaration, my_bundled_edge


\end_inset


\label{alg:my_bundled_edge_h"

\end_inset




\end_inset




\end_inset





my_bundled_edge is a class that has multiple properties: two doubles `m_width'
 (`m_
\begin_inset Index idx
status open

\begin_layout Plain Layout
m_


\end_inset

' stands for member
\begin_inset Index idx
status open

\begin_layout Plain Layout
member


\end_inset

) and `m_height', and two std::strings m_name and m_description.`my_bundled_edge'
 is copyable, but cannot trivially be converted to a `std::string.' `my_bundled_e
dge' is comparable for equality (that is, operator== is defined).



`my_bundled_edge' does not have to have the stream operators defined for
 file I/O, as this goes via the public member variables.


\begin_layout Subsection
Create an empty directed graph with bundled edges and vertices
\label{subsec:create_empty_directed_bundled_edges_and_vertices_graph"

\end_inset





\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_bundled_edges_and_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating an empty directed graph with bundled edges and vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty directed bundled edges and vertices graph


\end_inset


\label{alg:create_empty_directed_bundled_edges_and_vertices_graph"

\end_inset




\end_inset




\end_inset





This code is very similar to the code described in chapter 
\ref{subsec:create_empty_directed_custom_vertices_graph"

\end_inset

, except that there is a new, fifth template argument:



\begin_inset listings
inline false
status open

\begin_layout Plain Layout

boost::property<boost::edge_bundled_type_t, my_edge>


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::edge_bundled_type_t


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
my_edge


\end_inset

This can be read as: 
\begin_inset Quotes eld
\end_inset

edges have the property `boost::edge_bundled_type_t', which is of data type
 `my_bundled_edge'
\begin_inset Quotes erd
\end_inset

.
 Or simply: 
\begin_inset Quotes eld
\end_inset

edges have a bundled type called my_bundled_edge
\begin_inset Quotes erd
\end_inset

.



Demo:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_bundled_edges_and_vertices_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `create_empty_directed_bundled_edges_and_vertices_graph'
 function
\label{alg:create_empty_directed_bundled_edges_and_vertices_graph_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Create an empty undirected graph with bundled edges and vertices
\label{subsec:create_empty_undirected_bundled_edges_and_vertices_graph"

\end_inset





\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_bundled_edges_and_vertices_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating an empty undirected graph with bundled edges and vertices
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty undirected bundled edges and vertices graph


\end_inset


\label{alg:create_empty_undirected_bundled_edges_and_vertices_graph"

\end_inset




\end_inset




\end_inset





This code is very similar to the code described in chapter 
\ref{subsec:create_empty_directed_bundled_edges_and_vertices_graph"

\end_inset

, except that the directness (the third template argument) is undirected
 (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS


\end_inset

).



Demo:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_bundled_edges_and_vertices_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `create_empty_undirected_bundled_edges_and_vertices_graph'
 function
\label{alg:create_empty_undirected_bundled_edges_and_vertices_graph_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Add a bundled edge
\label{subsec:add_bundled_edge"

\end_inset





Adding a bundled edge is very similar to adding a named edge (chapter 
\ref{subsec:add_named_edge"

\end_inset

).



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_bundled_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Add a bundled edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
Add bundled edge


\end_inset


\label{alg:add_bundled_edge"

\end_inset




\end_inset




\end_inset





When having added a new (abstract) edge to the graph, the edge descriptor
 is used to set the my_edge in the graph.



Here is the demo:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "add_bundled_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of `add_bundled_edge'
\label{alg:add_bundled_edge_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Getting the bundled edges my_edges
\label{subsec:get_bundled_edge_my_edges"

\end_inset





When the edges of a graph are `my_bundled_edge' objects, one can extract
 these all as such:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_my_bundled_edges.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get the edges' my_bundled_edges
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get edge my_bundled_edges


\end_inset


\label{alg:get_bundled_edge_my_edges"

\end_inset




\end_inset




\end_inset





The `my_bundled_edge' object associated with the edges are obtained from
 the graph its property_map and then put into a std::vector.



Note: the order of the my_bundled_edge objects may be different after saving
 and loading.



When trying to get the edges' my_bundled_edge objects from a graph without
 bundled edges objects associated, you will get the error `formed reference
 to void' (see chapter 
\ref{subsec:formed_reference_to_void"

\end_inset

).


\begin_layout Subsection
Creating a Markov-chain with bundled edges and vertices
\label{subsec:create_bundled_edges_and_vertices_markov_chain"

\end_inset




\begin_layout Subsubsection
Graph



Figure 
\ref{fig:bundled_edges_and_vertices_markov_chain"

\end_inset

 shows the graph that will be reproduced:



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=9cm, semithick
]   


\begin_layout Plain Layout

  
\backslash
tikzstyle{every state}=[]


\begin_layout Plain Layout

  
\backslash
node[state] (A) 


\begin_layout Plain Layout

    {Stable,Right, 1.0, 2.0};   


\begin_layout Plain Layout

  
\backslash
node[state] (B) [right of=A] 


\begin_layout Plain Layout

    {Not unstable,Not left, 3.0, 4.0}


\begin_layout Plain Layout

  ;   


\begin_layout Plain Layout

  
\backslash
path (A) edge [loop above] node {Red,Heat,1,2} (A)


\begin_layout Plain Layout

        (A) edge [bend  left] node {Orange,Lose heat,3,4} (B)


\begin_layout Plain Layout

        (B) edge [bend  left] node {Yellow cold,Heat,4,5} (A)


\begin_layout Plain Layout

        (B) edge [loop above] node {Green cols,Stay cool,6,7} (B); 


\begin_layout Plain Layout


\backslash
end{tikzpicture}


\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A two-state Markov chain where the edges and vertices have bundled properties.
 The edges' and vertices' properties are nonsensical
\label{fig:bundled_edges_and_vertices_markov_chain"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Function to create such a graph



Here is the code creating a two-state Markov chain with bundled edges and
 vertices:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_edges_and_vertices_markov_chain.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating the two-state Markov chain as depicted in figure 
\ref{fig:bundled_edges_and_vertices_markov_chain"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create bundled edges and vertices Markov chain


\end_inset


\label{alg:create_bundled_edges_and_vertices_markov_chain"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Creating such a graph



Here is the demo:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_edges_and_vertices_markov_chain_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `create_bundled_edges_and_vertices_markov_chain' function (algorithm
 
\ref{alg:create_bundled_edges_and_vertices_markov_chain"

\end_inset

)
\label{alg:create_bundled_edges_and_vertices_markov_chain_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .dot file produced



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_bundled_edges_and_vertices_markov_chain.dot"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the `create_bundled_edges_and_vertices_markov_chain'
 function (algorithm 
\ref{alg:create_bundled_edges_and_vertices_markov_chain"

\end_inset

), converted from graph to .dot file using algorithm 
\ref{alg:save_graph_to_dot"

\end_inset


\label{alg:create_bundled_edges_and_vertices_markov_chain.dot"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .svg file produced



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_bundled_edges_and_vertices_markov_chain.svg

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the `create_bundled_edges_and_vertices_markov_chain'
 function (algorithm 
\ref{alg:create_custom_vertices_markov_chain"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\ref{alg:convert_dot_to_svg"

\end_inset


\label{fig:create_bundled_edges_and_vertices_markov_chain.svg"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 with bundled edges and vertices
\label{subsec:create_bundled_edges_and_vertices_k3"

\end_inset





Instead of using edges with a name, or other properties, here we use a bundled
 edge class called `my_bundled_edge'.


\begin_layout Subsubsection
Graph



We reproduce the 
\begin_inset Formula $K_{3}$
\end_inset

 with named edges and vertices of chapter 
\ref{subsec:create_named_edges_and_vertices_k3"

\end_inset

 , but with our bundled edges and vertices instead:



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tikz 


\begin_layout Plain Layout


\backslash
draw[] 


\begin_layout Plain Layout

  (2,4) node[draw=black,fill=white,shape=circle,text=black] {Red,Not green,1,2}
 


\begin_layout Plain Layout

   -- (5,2) node[anchor=west] {Oxygen,Air,1,2} 


\begin_layout Plain Layout

   -- (8,0) node[draw=black,fill=white,shape=circle,text=black] {Light red,Not
 dark,3,4} 


\begin_layout Plain Layout

   -- (4,0) node[anchor=north] {Helium,From tube,3,4} 


\begin_layout Plain Layout

   -- (0,0) node[draw=black,fill=white,shape=circle,text=black] {Orange,Orange,5
,6} 


\begin_layout Plain Layout

   -- (1,2) node[anchor=east] {Stable temperature,Here,5,6} 


\begin_layout Plain Layout

   -- (2,4)


\begin_layout Plain Layout

;


\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $K_{3}$
\end_inset

: a fully connected graph with three named edges and vertices 
\label{fig:create_bundled_edges_and_vertices_k3"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Function to create such a graph



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_edges_and_vertices_k3_graph.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating 
\begin_inset Formula $K_{3}$
\end_inset

 as depicted in figure 
\ref{fig:named_edges_and_vertices_k3"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create bundled edges and vertices K3 graph


\end_inset


\label{alg:create_bundled_edges_and_vertices_k3_graph"

\end_inset




\end_inset




\end_inset





Most of the code is a slight modification of algorithm 
\ref{alg:create_named_edges_and_vertices_k3_graph"

\end_inset

.
 In the end, the my_edges and my_vertices are obtained as the graph its
 property_map and set with the `my_bundled_edge' and `my_bundled_vertex'
 objects.


\begin_layout Subsubsection
Creating such a graph



Here is the demo:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_bundled_edges_and_vertices_k3_graph_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demo of the `create_bundled_edges_and_vertices_k3_graph' function (algorithm
 
\ref{alg:create_bundled_edges_and_vertices_k3_graph"

\end_inset

)
\label{alg:create_bundled_edges_and_vertices_k3_graph_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .dot file produced



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_bundled_edges_and_vertices_k3_graph.dot"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the `create_bundled_edges_and_vertices_markov_chain'
 function (algorithm 
\ref{alg:create_bundled_edges_and_vertices_k3_graph"

\end_inset

), converted from graph to .dot file using algorithm 
\ref{alg:save_graph_to_dot"

\end_inset


\label{alg:create_bundled_edges_and_vertices_k3_graph.dot"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .svg file produced



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_bundled_edges_and_vertices_k3_graph.svg
	scale 50

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the `create_bundled_edges_and_vertices_k3_graph' function
 (algorithm 
\ref{alg:create_custom_vertices_markov_chain"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\ref{alg:convert_dot_to_svg"

\end_inset


\label{fig:create_bundled_edges_and_vertices_k3_graph.svg"

\end_inset




\end_inset




\end_inset




\section{...}
Working on graphs with bundled edges and vertices


\begin_layout Subsection
Has a my_bundled_edge
\label{subsec:has_bundled_edge_with_my_edge"

\end_inset





Before modifying our edges, let's first determine if we can find an edge
 by its bundled type (`my_bundled_edge') in a graph.
 After obtaining a my_bundled_edge map, we obtain the edge iterators, dereferenc
e these to obtain the edge descriptors and then compare each edge its my_bundled
_edge with the one desired.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_bundled_edge_with_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Find if there is a bundled edge with a certain my_bundled_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
Has bundled edge with my_bundled_edge


\end_inset


\label{alg:has_bundled_edge_with_my_edge"

\end_inset




\end_inset




\end_inset





This function can be demonstrated as in algorithm 
\ref{alg:has_bundled_edge_with_my_edge_demo"

\end_inset

, where a certain `my_bundled_edge' cannot be found in an empty graph.
 After adding the desired my_bundled_edge, it is found.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "has_bundled_edge_with_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `has_bundled_edge_with_my_edge' function
\label{alg:has_bundled_edge_with_my_edge_demo"

\end_inset




\end_inset




\end_inset





Note that this function only finds if there is at least one edge with that
 my_bundled_edge: it does not tell how many edges with that my_bundled_edge
 exist in the graph.


\begin_layout Subsection
Find a my_bundled_edge
\label{subsec:find_first_bundled_edge_with_my_edge"

\end_inset





Where STL functions work with iterators, here we obtain an edge descriptor
 (see chapter 
\ref{subsec:Edge-descriptors"

\end_inset

) to obtain a handle to the desired edge.
 Algorithm 
\ref{alg:find_first_bundled_edge_with_my_edge"

\end_inset

 shows how to obtain an edge descriptor to the first edge found with a specific
 my_bundled_edge value.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_bundled_edge_with_my_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Find the first bundled edge with a certain my_bundled_edge
\begin_inset Index idx
status open

\begin_layout Plain Layout
Find first bundled edge with my_bundled_edge


\end_inset


\label{alg:find_first_bundled_edge_with_my_edge"

\end_inset




\end_inset




\end_inset





With the edge descriptor obtained, one can read and modify the edge and
 the vertices surrounding it.
 Algorithm 
\ref{alg:find_first_bundled_edge_with_my_edge_demo"

\end_inset

 shows some examples of how to do so.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "find_first_bundled_edge_with_my_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `find_first_bundled_edge_with_my_edge' function
\label{alg:find_first_bundled_edge_with_my_edge_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Get an edge its my_bundled_edge
\label{subsec:get_bundled_edge_my_edge"

\end_inset





To obtain the my_bundled_edge from an edge descriptor, one needs to pull
 out the my_bundled_edges map and then look up the my_edge of interest.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_my_bundled_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get a vertex its my_bundled_vertex from its vertex descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get my_bundled_edge


\end_inset


\label{alg:get_bundled_edge_my_edge"

\end_inset




\end_inset




\end_inset





To use `get_my_bundled_edge', one first needs to obtain an edge descriptor.
 Algorithm 
\ref{alg:get_bundled_edge_my_edge_demo"

\end_inset

 shows a simple example.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_my_bundled_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration if the `get_my_bundled_edge' function
\label{alg:get_bundled_edge_my_edge_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Set an edge its my_bundled_edge
\label{subsec:set_bundled_edge_my_edge"

\end_inset





If you know how to get the my_bundled_edge from an edge descriptor, setting
 it is just as easy, as shown in algorithm 
\ref{alg:set_bundled_edge_my_edge"

\end_inset

.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_my_bundled_edge.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Set a bundled edge its my_bundled_edge from its edge descriptor
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set bundled edge my_bundled_edge


\end_inset


\label{alg:set_bundled_edge_my_edge"

\end_inset




\end_inset




\end_inset





To use `set_bundled_edge_my_edge', one first needs to obtain an edge descriptor.
 Algorithm 
\ref{alg:set_bundled_edge_my_edge_demo"

\end_inset

 shows a simple example.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_my_bundled_edge_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration if the `set_bundled_edge_my_edge' function
\label{alg:set_bundled_edge_my_edge_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Storing a graph with bundled edges and vertices as a .dot
\label{subsec:save_bundled_edges_and_vertices_graph_to_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph with bundled edges and vertices as .dot


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create .dot from graph with bundled edges and vertices


\end_inset

 



If you used the `create_bundled_edges_and_vertices_k3_graph' function (algorithm
 
\ref{alg:create_bundled_edges_and_vertices_k3_graph"

\end_inset

) to produce a 
\begin_inset Formula $K_{3}$
\end_inset

graph with edges and vertices associated with my_bundled_edge and my_bundled_ver
tex objects, you can store these my_bundled_edges and my_bundled_vertex-es
 additionally with algorithm 
\ref{alg:save_bundled_edges_and_vertices_graph_to_dot"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_bundled_edges_and_vertices_graph_to_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Storing a graph with bundled edges and vertices as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save bundled edges and vertices graph to dot


\end_inset


\label{alg:save_bundled_edges_and_vertices_graph_to_dot"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Load a directed graph with bundled edges and vertices from a .dot file
\label{subsec:sub:load_directed_bundled_edges_and_vertices_graph_from_dot"

\end_inset





When loading a graph from file, one needs to specify a type of graph.
 In this example, an directed graph with bundled edges and vertices is loaded,
 as shown in algorithm 
\ref{alg:load_directed_bundled_edges_and_vertices_graph_from_dot"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_bundled_edges_and_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Loading a directed graph with bundled edges and vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed bundled edges and vertices graph from dot


\end_inset


\label{alg:load_directed_bundled_edges_and_vertices_graph_from_dot"

\end_inset




\end_inset




\end_inset





In this algorithm, first it is checked if the file to load exists.
 Then an empty directed graph is created.
 Next to this, a boost::dynamic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties


\end_inset

 is created with its default constructor, after which we direct the boost::dynam
ic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties


\end_inset

 to find a `node_id' and `label' in the vertex name map, `edge_id' and `label'
 to the edge name map.
 From this and the empty graph, `boost::read_graphviz'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz


\end_inset

 is called to build up the graph.



Algorithm 
\ref{alg:load_directed_bundled_edges_and_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the `load_directed_bundled_edges_and_vertices_graph_from_dot'
 function:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_bundled_edges_and_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `load_directed_bundled_edges_and_vertices_graph_from_dot'fu
nction
\label{alg:load_directed_bundled_edges_and_vertices_graph_from_dot_demo"

\end_inset




\end_inset




\end_inset





This demonstration shows how the Markov chain is created using the `create_bundl
ed_edges_and_vertices_markov_chain' function (algorithm 
\ref{alg:create_bundled_edges_and_vertices_markov_chain"

\end_inset

), saved and then loaded.


\begin_layout Subsection
Load an undirected graph with bundled edges and vertices from a .dot file
\label{subsec:load_undirected_bundled_edges_and_vertices_graph_from_dot"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected graph with bundled edges and vertices from .dot


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Create undirected graph with bundled edges and vertices from .dot


\end_inset





When loading a graph from file, one needs to specify a type of graph.
 In this example, an undirected graph with bundled edges and vertices is
 loaded, as shown in algorithm 
\ref{alg:load_undirected_bundled_edges_and_vertices_graph_from_dot"

\end_inset

:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_bundled_edges_and_vertices_graph_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Loading an undirected graph with bundled edges and vertices from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected bundled edges and vertices graph from dot


\end_inset


\label{alg:load_undirected_bundled_edges_and_vertices_graph_from_dot"

\end_inset




\end_inset




\end_inset





The only difference with loading a directed graph, is that the initial empty
 graph is undirected instead.
 Chapter 
\ref{subsec:sub:load_directed_bundled_edges_and_vertices_graph_from_dot"

\end_inset

 describes the rationale of this function.
 



Algorithm 
\ref{alg:load_undirected_bundled_edges_and_vertices_graph_from_dot_demo"

\end_inset

 shows how to use the `load_undirected_bundled_vertices_graph_from_dot'
 function:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_bundled_edges_and_vertices_graph_from_dot_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of the `load_undirected_bundled_edges_and_vertices_graph_from_dot'
function
\label{alg:load_undirected_bundled_edges_and_vertices_graph_from_dot_demo"

\end_inset




\end_inset




\end_inset





This demonstration shows how 
\begin_inset Formula $K_{2}$
\end_inset

 with bundled vertices is created using the `create_bundled_vertices_k2_graph'
 function (algorithm 
\ref{alg:create_custom_vertices_k2_graph"

\end_inset

), saved and then loaded.
 The loaded graph is checked to be a graph similar to the original.


\section{...}
Building graphs with a graph name
\label{sec:Building-graphs-with-a-graph-name"

\end_inset





Up until now, the graphs created have had no properties themselves.
 Sure, the edges and vertices have had properties, but the graph itself
 has had none.
 Until now.



In this chapter, graphs will be created with a graph name of type std::string


\begin_layout Itemize
An empty directed graph with a graph name: see chapter 


\begin_layout Itemize
An empty undirected graph with a graph name: see chapter 


\begin_layout Itemize
A two-state Markov chain with a graph name: see chapter


\begin_layout Itemize
\begin_inset Formula $K_{3}$
\end_inset

with a graph name: see chapter 



In the process, some basic (sometimes bordering trivial) functions are shown:


\begin_layout Itemize
Getting a graph its name: see chapter 


\begin_layout Itemize
Setting a graph its name: see chapter


\begin_layout Subsection
Create an empty directed graph with a graph name property
\label{subsec:create_empty_directed_graph_with_graph_name"

\end_inset





Algorithm 
\ref{alg:create_empty_directed_graph_with_graph_name"

\end_inset

 shows the function to create an empty directed graph with a graph name.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_graph_with_graph_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating an empty directed graph with a graph name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty directed graph with graph name


\end_inset


\label{alg:create_empty_directed_graph_with_graph_name"

\end_inset




\end_inset




\end_inset





This boost::adjacency_list is of the following type:


\begin_layout Itemize
the first `boost::vecS'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS


\end_inset

: select (that is what the `S
\begin_inset Index idx
status open

\begin_layout Plain Layout
S


\end_inset

' means) that out edges are stored in a std::vector.
 This is the default way.


\begin_layout Itemize
the second `boost::vecS'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::vecS


\end_inset

: select that the graph vertices are stored in a std::vector.
 This is the default way.


\begin_layout Itemize
`boost::directedS'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::directedS


\end_inset

: select that the graph is directed.
 This is the default selectedness


\begin_layout Itemize
the first `boost::no_property'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::no_property


\end_inset

: the vertices have no properties.
 This is the default (non-)property


\begin_layout Itemize
the second `boost::no_property'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::no_property


\end_inset

: the vertices have no properties.
 This is the default (non-)property


\begin_layout Itemize
`boost::property<boost::graph_name_t, std::string>'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::property


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::graph_name_t


\end_inset

: the graph itself has a single property: its boost::graph_name
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::graph_name


\end_inset

 has type std::string



Algorithm 
\ref{alg:create_empty_directed_graph_with_graph_name_demo"

\end_inset

 demonstrates the `create_empty_directed_graph_with_graph_name' function.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_directed_graph_with_graph_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `create_empty_directed_graph_with_graph_name'
\label{alg:create_empty_directed_graph_with_graph_name_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Create an empty undirected graph with a graph name property
\label{subsec:create_empty_undirected_graph_with_graph_name"

\end_inset





Algorithm 
\ref{alg:create_empty_undirected_graph_with_graph_name"

\end_inset

 shows the function to create an empty undirected graph with a graph name.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_graph_with_graph_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating an empty undirected graph with a graph name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create empty undirected graph with graph name


\end_inset


\label{alg:create_empty_undirected_graph_with_graph_name"

\end_inset




\end_inset




\end_inset





This code is very similar to the code described in chapter 
\ref{alg:create_empty_directed_graph_with_graph_name"

\end_inset

, except that the directness (the third template argument) is undirected
 (due to the boost::undirectedS
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::undirectedS


\end_inset

).



Algorithm 
\ref{alg:create_empty_undirected_graph_with_graph_name_demo"

\end_inset

 demonstrates the `create_empty_undirected_graph_with_graph_name' function.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_empty_undirected_graph_with_graph_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `create_empty_undirected_graph_with_graph_name'
\label{alg:create_empty_undirected_graph_with_graph_name_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Get a graph its name property
\label{subsec:get_graph_name"

\end_inset





\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_graph_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Get a graph its name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get graph name


\end_inset


\label{alg:get_graph_name"

\end_inset




\end_inset




\end_inset





Algorithm 
\ref{alg:get_graph_name_demo"

\end_inset

 demonstrates the `get_graph_name' function.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_graph_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `get_graph_name'
\label{alg:get_graph_name_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Set a graph its name property
\label{subsec:set_graph_name"

\end_inset





\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_graph_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Set a graph its name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Set graph name


\end_inset


\label{alg:set_graph_name"

\end_inset




\end_inset




\end_inset





Algorithm 
\ref{alg:set_graph_name_demo"

\end_inset

 demonstrates the `set_graph_name' function.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "set_graph_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `set_graph_name'
\label{alg:set_graph_name_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Create a directed graph with a graph name property
\label{subsec:create_markov_chain_with_graph_name"

\end_inset




\begin_layout Subsubsection
Graph



See figure 
\ref{fig:markov_chain"

\end_inset

.


\begin_layout Subsubsection
Function to create such a graph



Algorithm 
\ref{alg:create_markov_chain_with_graph_name"

\end_inset

 shows the function to create an empty directed graph with a graph name.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_markov_chain_with_graph_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating a two-state Markov chain with a graph name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create Markov chain with graph name


\end_inset


\label{alg:create_markov_chain_with_graph_name"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Creating such a graph



Algorithm 
\ref{alg:create_markov_chain_with_graph_name_demo"

\end_inset

 demonstrates the `create_markov_chain_with_graph_name' function.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_markov_chain_with_graph_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `create_markov_chain_with_graph_name'
\label{alg:create_markov_chain_with_graph_name_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .dot file produced



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_markov_chain_with_graph_name.dot"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the `create_markov_chain_with_graph_name' function
 (algorithm 
\ref{alg:create_markov_chain_with_graph_name"

\end_inset

), converted from graph to .dot file using algorithm 
\ref{alg:save_graph_to_dot"

\end_inset


\label{alg:create_markov_chain_with_graph_name.dot"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .svg file produced



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_markov_chain_with_graph_name.svg

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the `create_markov_chain_with_graph_name' function
 (algorithm 
\ref{alg:create_markov_chain_with_graph_name"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\ref{alg:convert_dot_to_svg"

\end_inset


\label{fig:create_markov_chain_with_graph_name.svg"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Create an undirected graph with a graph name property
\label{subsec:create_k2_graph_with_graph_name"

\end_inset




\begin_layout Subsubsection
Graph



See figure 
\ref{fig:k2_graph"

\end_inset

.


\begin_layout Subsubsection
Function to create such a graph



Algorithm 
\ref{alg:create_k2_graph_with_graph_name"

\end_inset

 shows the function to create K2 graph with a graph name.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k2_graph_with_graph_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating a K2 graph with a graph name
\begin_inset Index idx
status open

\begin_layout Plain Layout
Create K2 graph with graph name


\end_inset


\label{alg:create_k2_graph_with_graph_name"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
Creating such a graph



Algorithm 
\ref{alg:create_k2_graph_with_graph_name_demo"

\end_inset

 demonstrates the `create_k2_graph_with_graph_name' function.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "create_k2_graph_with_graph_name_demo.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstration of `create_k2_graph_with_graph_name'
\label{alg:create_k2_graph_with_graph_name_demo"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .dot file produced



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "create_k2_graph_with_graph_name.dot"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.dot file created from the `create_k2_graph_with_graph_name' function (algorithm
 
\ref{alg:create_k2_graph_with_graph_name"

\end_inset

), converted from graph to .dot file using algorithm 
\ref{alg:save_graph_to_dot"

\end_inset


\label{alg:create_k2_graph_with_graph_name.dot"

\end_inset




\end_inset




\end_inset




\begin_layout Subsubsection
The .svg file produced



\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename create_k2_graph_with_graph_name.svg

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
.svg file created from the `create_k2_graph_with_graph_name' function (algorithm
 
\ref{alg:create_k2_graph_with_graph_name"

\end_inset

) its .dot file, converted from .dot file to .svg using algorithm 
\ref{alg:convert_dot_to_svg"

\end_inset


\label{fig:create_k2_graph_with_graph_name.svg"

\end_inset




\end_inset




\end_inset




\section{...}
Working on graphs with a graph name


\begin_layout Subsection
Storing a graph with a graph name property as a .dot file
\label{subsec:save_graph_with_graph_name_to_dot"

\end_inset





This works:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "save_graph_with_graph_name_to_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Storing a graph with a graph name as a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Save graph with graph name to dot


\end_inset


\label{alg:save_graph_with_graph_name_to_dot"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Loading a directed graph with a graph name property from a .dot file
\label{subsec:load_directed_graph_with_graph_name_from_dot"

\end_inset





This will result in a directed graph with a name:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_directed_graph_with_graph_name_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Loading a directed graph with a graph name from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load directed custom edges and vertices graph from dot


\end_inset


\label{alg:load_directed_graph_with_graph_name_from_dot"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Loading an undirected graph with a graph name property from a .dot file
\label{subsec:load_undirected_graph_with_graph_name_from_dot"

\end_inset





This will result in an undirected graph with a name:



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "load_undirected_graph_with_graph_name_from_dot.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Loading an undirected graph with a graph name from a .dot file
\begin_inset Index idx
status open

\begin_layout Plain Layout
Load undirected custom edges and vertices graph from dot


\end_inset


\label{alg:load_undirected_graph_with_graph_name_from_dot"

\end_inset




\end_inset




\end_inset




\section{...}
Other graph functions
\label{sec:Other-graph-functions"

\end_inset





Some functions that did not fit in.


\begin_layout Subsection
Encode a std::string to a Graphviz-friendly format
\label{subsec:graphviz_encode"

\end_inset





You may want to use a label with spaces, comma's and/or quotes.
 Saving and loading these, will result in problem.
 This function replaces these special characters by a rare combination of
 ordinary characters.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "graphviz_encode.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Encode a std::string to a Graphviz-friendly format
\begin_inset Index idx
status open

\begin_layout Plain Layout
graphviz encode


\end_inset


\label{alg:graphviz_encode"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Decode a std::string from a Graphviz-friendly format
\label{subsec:graphviz_decode"

\end_inset





This function undoes the `graphviz_encode' function (algorithm 
\ref{alg:graphviz_encode"

\end_inset

) and thus converts a Graphviz-friendly std::string to the original human-friend
ly std::string.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "graphviz_decode.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Decode a std::string from a Graphviz-friendly format to a human-friendly
 format
\begin_inset Index idx
status open

\begin_layout Plain Layout
graphviz decode


\end_inset


\label{alg:graphviz_decode"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Check if a std::string is Graphviz-friendly
\label{subsec:is_graphviz_friendly"

\end_inset





There are pieces where I check if a std::string is Graphviz-friendly.
 This is done only where it matters.
 If it is tested not to matter, `is_graphviz_friendly' is absent.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "is_graphviz_friendly.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Check if a std::string is Graphviz-friendly
\begin_inset Index idx
status open

\begin_layout Plain Layout
is_graphviz_friendly


\end_inset


\label{alg:is_graphviz_friendly"

\end_inset




\end_inset




\end_inset




\section{...}
Misc functions



These are some function I needed for creating this tutorial.
 Although they are not important for working with graphs, I used these heavily.
 These functions may be compiler-dependent, platform-dependent and/or there
 may be superior alternatives.
 I just add them for completeness.


\begin_layout Subsection
Getting a data type as a std::string
\label{subsec:get_type_name"

\end_inset





This function will only work under GCC.
 I found this code at: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://stackoverflow.com/questions/1055452/c-get-name-of-type-in-template


\end_inset

 .
 Thanks to `m-dudley' (Stack Overflow user page at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://stackoverflow.com/users/111327/m-dudley


\end_inset

 ).



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "get_type_name.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Getting a data type its name as a std::string
\begin_inset Index idx
status open

\begin_layout Plain Layout
Get type name


\end_inset


\label{alg:get_type_name"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Convert a .dot to .svg
\label{subsec:convert_dot_to_svg"

\end_inset





All illustrations in this tutorial are created by converting .dot to a .svg
 (`Scalable Vector Graphic') file.
 This function assumes the program `dot' is installed, which is part of
 Graphviz.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "convert_dot_to_svg.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Convert a .dot file to a .svg
\begin_inset Index idx
status open

\begin_layout Plain Layout
Convert dot to svg


\end_inset


\label{alg:convert_dot_to_svg"

\end_inset




\end_inset




\end_inset





`convert_dot_to_svg' makes a system call to the program `dot' to convert
 the .dot file to an .svg file.


\begin_layout Subsection
Check if a file exists
\label{subsec:is_regular_file"

\end_inset





Not the most smart way perhaps, but it does only use the STL.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "is_regular_file.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Check if a file exists
\begin_inset Index idx
status open

\begin_layout Plain Layout
Is regular file


\end_inset


\label{alg:is_regular_file"

\end_inset




\end_inset




\end_inset




\section{...}
Errors



Some common errors.


\begin_layout Subsection
Formed reference to void
\label{subsec:formed_reference_to_void"

\end_inset





This compile-time error occurs when you create a graph without a certain
 property, then subsequently reading that property, as in algorithm 
\ref{alg:formed_reference_to_void"

\end_inset

: 



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "formed_reference_to_void.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating the error `formed reference to void'
\begin_inset Index idx
status open

\begin_layout Plain Layout
Formed reference to void


\end_inset


\label{alg:formed_reference_to_void"

\end_inset




\end_inset




\end_inset





In algorithm 
\ref{alg:formed_reference_to_void"

\end_inset

 a graph is created with vertices of no properties.
 Then the names of these vertices, which do not exists, are tried to be
 read.
 If you want to read the names of the vertices, supply a graph that has
 this property.


\begin_layout Subsection
No matching function for call to `clear_out_edges'
\label{subsec:no_matching_function_for_call_to_clear_out_edges"

\end_inset





This compile-time error occurs when you want to clear the outward edges
 from a vertex in an undirected graph.
 



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "no_matching_function_for_call_to_clear_out_edges.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating the error `no matching function for call to clear_out_edges'
\begin_inset Index idx
status open

\begin_layout Plain Layout
No matching function for call to clear_out_edges


\end_inset


\label{alg:no_matching_function_for_call_to_clear_out_edges"

\end_inset




\end_inset




\end_inset





In algorithm 
\ref{alg:no_matching_function_for_call_to_clear_out_edges"

\end_inset

an undirected graph is created, a vertex descriptor is obtained, then itsout
 edges are tried to be cleared.Either use a directed graph (which has out
 edges), or use the `boost::clear_vertex' function instead.


\begin_layout Subsection
No matching function for call to `clear_in_edges'
\label{subsec:no_matching_function_for_call_to_clear_in_edges"

\end_inset





See chapter 
\ref{subsec:no_matching_function_for_call_to_clear_out_edges"

\end_inset

.


\begin_layout Subsection
Undefined reference to boost::detail::graph::read_graphviz_new
\label{subsec:undefined_reference_to_read_graphviz_new"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
read_graphviz_new


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Undefined reference to read_graphviz_new


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
read_graphviz_new, undefined reference


\end_inset





You will have to link
\begin_inset Index idx
status open

\begin_layout Plain Layout
link


\end_inset

 against the Boost.Graph and Boost.Regex libraries.
 In Qt Creator, this is achieved by adding these lines to your Qt Creator
 project file:



\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LIBS += -lboost_graph -lboost_regex 


\end_inset




\begin_layout Subsection
Property not found: node_id
\label{subsec:property_not_found_node_id"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
node_id


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Property not found


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Property not found: node_id


\end_inset





When loading a graph from file (as in chapter 
\ref{subsec:load_undirected_graph_from_dot"

\end_inset

) you will be using boost::read_graphviz
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz


\end_inset

.
 boost::read_graphviz
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::read_graphviz


\end_inset

 needs a third argument, of type boost::dynamic_properties
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::dynamic_properties


\end_inset

.
 When a graph does not have properties, do not use a default constructed
 version, but initialize with `boost::ignore_other_properties'
\begin_inset Index idx
status open

\begin_layout Plain Layout
boost::ignore_other_properties


\end_inset

 as a constructor argument instead.
 Algorithm 
\ref{alg:property_not_found_node_id"

\end_inset

 shows how to trigger this run-time error.



\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "property_not_found_node_id.impl"
lstparams "breaklines=true,language={C++}"

\end_inset




\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Creating the error `Property not found: node_id'
\begin_inset Index idx
status open

\begin_layout Plain Layout
Property not found: node_id


\end_inset


\label{alg:property_not_found_node_id"

\end_inset




\end_inset




\end_inset




\begin_layout Subsection
Stream zeroes



When loading a graph from a .dot file, in operator>>, I encountered reading
 zeroes, where I expected an XML formatted string:



\begin_inset listings
inline false
status open

\begin_layout Plain Layout

std::istream& ribi::cmap::operator>>(std::istream& is, my_class& any_class)
 noexcept


\begin_layout Plain Layout

{


\begin_layout Plain Layout

  std::string s;


\begin_layout Plain Layout

  is >> s; //s has an XML format


\begin_layout Plain Layout

  assert(s != "0");


\begin_layout Plain Layout

  any_class = my_class(s);


\begin_layout Plain Layout

  return is;


\begin_layout Plain Layout

}


\end_inset





This was because I misconfigured the reader.
 I did (heavily simplified code):



\begin_inset listings
inline false
status open

\begin_layout Plain Layout

graph load_from_dot(const std::string& dot_filename)


\begin_layout Plain Layout

{


\begin_layout Plain Layout

  std::ifstream f(dot_filename);


\begin_layout Plain Layout

  graph g;


\begin_layout Plain Layout

  boost::dynamic_properties dp;


\begin_layout Plain Layout

  dp.property("node_id", get(boost::vertex_custom_type, g));


\begin_layout Plain Layout

  dp.property("label", get(boost::vertex_custom_type, g));


\begin_layout Plain Layout

  boost::read_graphviz(f,g,dp);


\begin_layout Plain Layout

  return g;


\begin_layout Plain Layout

}


\end_inset





Where it should have been:



\begin_inset listings
inline false
status open

\begin_layout Plain Layout

graph load_from_dot(const std::string& dot_filename)


\begin_layout Plain Layout

{


\begin_layout Plain Layout

  std::ifstream f(dot_filename);


\begin_layout Plain Layout

  graph g;


\begin_layout Plain Layout

  boost::dynamic_properties dp(boost::ignore_other_properties);


\begin_layout Plain Layout

  dp.property("label", get(boost::vertex_custom_type, g));


\begin_layout Plain Layout

  boost::read_graphviz(f,g,dp);


\begin_layout Plain Layout

  return g;


\begin_layout Plain Layout

}


\end_inset





The explanation is that by setting the boost::dynamic_property `node_id'
 to `boost::vertex_custom_type', operator>> will receive the node indices.
 



An alternative, but less clean solution, is to let operator>> ignore the
 node indices:



\begin_inset listings
inline false
status open

\begin_layout Plain Layout

std::istream& ribi::cmap::operator>>(std::istream& is, my_class& any_class)
 noexcept


\begin_layout Plain Layout

{


\begin_layout Plain Layout

  std::string s;


\begin_layout Plain Layout

  is >> s; //s has an XML format


\begin_layout Plain Layout

  if (!is_xml(s)) { //Ignore node index


\begin_layout Plain Layout

    any_class_class = my_class(); 


\begin_layout Plain Layout

  }


\begin_layout Plain Layout

  else {


\begin_layout Plain Layout

    any_class_class = my_class(s);


\begin_layout Plain Layout

  }


\begin_layout Plain Layout

  return is;


\begin_layout Plain Layout

}


\end_inset




\section{...}
Appendix


\begin_layout Subsection
List of all edge, graph and vertex properties
\label{subsec:all_properties"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
All edge properties


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
All graph properties


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
All vertex properties


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Edge properties


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Graph properties


\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Vertex properties


\end_inset





The following list is obtained from the file `boost/graph/properties.hpp'.



\begin_inset Tabular
<lyxtabular version="3" rows="29" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Edge


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Graph


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vertex


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_all


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
graph_all


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_all


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_bundle


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
graph_bundle


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_bundle


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_capacity


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
graph_name


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_centrality


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_centrality


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
graph_visitor


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_color


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_color


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_current_degree


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_discover_time


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_degree


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_finished


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_discover_time


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_flow


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_distance


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_global


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_distance2


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_index


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_finish_time


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_local


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_global


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_local_index


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_in_degree


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_name


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_index


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_owner


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_index1


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_residual_capacity


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_index2


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_reverse


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_local


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_underlying


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_local_index


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_update


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_lowpoint


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_weight


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_name


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edge_weight2


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_out_degree


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_owner


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_potential


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_predecessor


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_priority


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_rank


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_root


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_underlying


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertex_update


\end_inset
</cell>
</row>
</lyxtabular>

\end_inset




\begin_layout Subsection
Graphviz attributes
\label{subsec:Graphviz-attributes"

\end_inset





List created from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

www.graphviz.org/content/attrs


\end_inset

, where only the attributes that are supported by all formats are listed:



\begin_inset Tabular
<lyxtabular version="3" rows="45" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
Edge


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
Graph


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
Vertex


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
arrowhead


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
_background


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
color


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
arrowsize


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
bgcolor


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
colorscheme


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
arrowtail


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
center


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
comment


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
color


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
charset


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
distortion


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
colorscheme


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
color


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fillcolor


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
comment


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
colorscheme


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fixedsize


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
decorate


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
comment


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fontcolor


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
dir


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
concentrate


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fontname


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fillcolor


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fillcolor


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fontsize


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fontcolor


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fontcolor


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
gradientangle


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fontname


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fontname


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
height


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fontsize


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fontpath


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
image


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
gradientangle


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
fontsize


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
imagescale


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
headclip


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
forcelabels


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
label


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
headlabel


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
gradientangle


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
labelloc


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
headport


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
imagepath


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
layer


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
label


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
label


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
margin


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
labelangle


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
labeljust


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
nojustify


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
labeldistance


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
labelloc


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
orientation


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
labelfloat


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
landscape


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
penwidth


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
labelfontcolor


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
layerlistsep


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
peripheries


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
labelfontname


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
layers


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
pos


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
labelfontsize


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
layerselect


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
regular


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
layer


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
layersep


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
samplepoints


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
nojustify


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
layout


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
shape


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
penwidth


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
margin


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
shapefile


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
pos


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
nodesep


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
sides


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
style


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
nojustify


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
skew


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
tailclip


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
orientation


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
sortv


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
taillabel


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
outputorder


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
style


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
tailport


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
pack


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
width


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
weight


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
packmode


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
xlabel


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
xlabel


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
pad


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
z


\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
page


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
pagedir


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
penwidth


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
quantum


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
ratio


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
rotate


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
size


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
sortv


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
splines


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
style


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
viewport


\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout



\end_inset
</cell>
</row>
</lyxtabular>

\end_inset





\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "boost_graph_cookbook_1"
options "plain"

\end_inset





\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"

\end_inset




\end_body
\end_document
