%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Create an empty undirected graph with a graph name property}
\label{subsec:create_empty_undirected_graph_with_graph_name}

Listing 
\ref{lst:create_empty_undirected_graph_with_graph_name}

 shows the function to create an empty undirected graph with a graph name.

\lstinputlisting[
  caption = ,
  label = lst:
]{create_empty_undirected_graph_with_graph_name.impl}

Creating an empty undirected graph with a graph name
\index{Create empty undirected graph with graph name

\label{lst:create_empty_undirected_graph_with_graph_name}

This code is very similar to the code described in chapter 
\ref{lst:create_empty_directed_graph_with_graph_name}

, except that the directness (the third template argument) is undirected
 (due to the boost::undirectedS
\index{boost::undirectedS

).

Listing 
\ref{lst:create_empty_undirected_graph_with_graph_name_demo}

 demonstrates the \verb;create_empty_undirected_graph_with_graph_name' function.

\lstinputlisting[
  caption = ,
  label = lst:
]{create_empty_undirected_graph_with_graph_name_demo.impl}

Demonstration of \verb;create_empty_undirected_graph_with_graph_name'
\label{lst:create_empty_undirected_graph_with_graph_name_demo}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Get a graph its name property}
\label{subsec:get_graph_name}

\lstinputlisting[
  caption = ,
  label = lst:
]{get_graph_name.impl}

Get a graph its name
\index{Get graph name

\label{lst:get_graph_name}

Listing 
\ref{lst:get_graph_name_demo}

 demonstrates the \verb;get_graph_name' function.

\lstinputlisting[
  caption = ,
  label = lst:
]{get_graph_name_demo.impl}

Demonstration of \verb;get_graph_name'
\label{lst:get_graph_name_demo}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Set a graph its name property}
\label{subsec:set_graph_name}

\lstinputlisting[
  caption = ,
  label = lst:
]{set_graph_name.impl}

Set a graph its name
\index{Set graph name

\label{lst:set_graph_name}

Listing 
\ref{lst:set_graph_name_demo}

 demonstrates the \verb;set_graph_name' function.

\lstinputlisting[
  caption = ,
  label = lst:
]{set_graph_name_demo.impl}

Demonstration of \verb;set_graph_name'
\label{lst:set_graph_name_demo}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Create a directed graph with a graph name property}
\label{subsec:create_markov_chain_with_graph_name}

\subsection{Graph}

See figure 
\ref{fig:markov_chain}

.

\subsection{Function to create such a graph}

Listing 
\ref{lst:create_markov_chain_with_graph_name}

 shows the function to create an empty directed graph with a graph name.

\lstinputlisting[
  caption = ,
  label = lst:
]{create_markov_chain_with_graph_name.impl}

Creating a two-state Markov chain with a graph name
\index{Create Markov chain with graph name

\label{lst:create_markov_chain_with_graph_name}

\subsection{Creating such a graph}

Listing 
\ref{lst:create_markov_chain_with_graph_name_demo}

 demonstrates the \verb;create_markov_chain_with_graph_name' function.

\lstinputlisting[
  caption = ,
  label = lst:
]{create_markov_chain_with_graph_name_demo.impl}

Demonstration of \verb;create_markov_chain_with_graph_name'
\label{lst:create_markov_chain_with_graph_name_demo}

\subsection{The .dot file produced}


\lstinputlisting[
  caption = ,
  label = lst:
]{create_markov_chain_with_graph_name.dot}

.dot file created from the \verb;create_markov_chain_with_graph_name' function
 (algorithm 
\ref{lst:create_markov_chain_with_graph_name}

), converted from graph to .dot file using algorithm 
\ref{lst:save_graph_to_dot}

\label{lst:create_markov_chain_with_graph_name.dot}

\subsection{The .svg file produced}

\begin{figure}[!htbp]
  \includegraphics[]{create_markov_chain_with_graph_name.svg}
  \caption{
    .
  }
  \label{fig:.}
\end{figure}

.svg file created from the \verb;create_markov_chain_with_graph_name' function
 (algorithm 
\ref{lst:create_markov_chain_with_graph_name}

) its .dot file, converted from .dot file to .svg using algorithm 
\ref{lst:convert_dot_to_svg}

\label{fig:create_markov_chain_with_graph_name.svg}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Create an undirected graph with a graph name property}
\label{subsec:create_k2_graph_with_graph_name}

\subsection{Graph}

See figure 
\ref{fig:k2_graph}

.

\subsection{Function to create such a graph}

Listing 
\ref{lst:create_k2_graph_with_graph_name}

 shows the function to create K2 graph with a graph name.

\lstinputlisting[
  caption = ,
  label = lst:
]{create_k2_graph_with_graph_name.impl}

Creating a K2 graph with a graph name
\index{Create K2 graph with graph name

\label{lst:create_k2_graph_with_graph_name}

\subsection{Creating such a graph

Listing 
\ref{lst:create_k2_graph_with_graph_name_demo}

 demonstrates the \verb;create_k2_graph_with_graph_name' function.

\lstinputlisting[
  caption = ,
  label = lst:
]{create_k2_graph_with_graph_name_demo.impl}

Demonstration of \verb;create_k2_graph_with_graph_name'
\label{lst:create_k2_graph_with_graph_name_demo}

\subsection{The .dot file produced


\lstinputlisting[
  caption = ,
  label = lst:
]{create_k2_graph_with_graph_name.dot}

.dot file created from the \verb;create_k2_graph_with_graph_name' function (algorithm
 
\ref{lst:create_k2_graph_with_graph_name}

), converted from graph to .dot file using algorithm 
\ref{lst:save_graph_to_dot}

\label{lst:create_k2_graph_with_graph_name.dot}

\subsection{The .svg file produced}

\begin{figure}[!htbp]
  \includegraphics[]{create_k2_graph_with_graph_name.svg}
  \caption{
    .
  }
  \label{fig:.}
\end{figure}

.svg file created from the \verb;create_k2_graph_with_graph_name' function (algorithm
 
\ref{lst:create_k2_graph_with_graph_name}

) its .dot file, converted from .dot file to .svg using algorithm 
\ref{lst:convert_dot_to_svg}

\label{fig:create_k2_graph_with_graph_name.svg}

\section{...}
Working on graphs with a graph name

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Storing a graph with a graph name property as a .dot file}
\label{subsec:save_graph_with_graph_name_to_dot}

This works:

\lstinputlisting[
  caption = ,
  label = lst:
]{save_graph_with_graph_name_to_dot.impl}

Storing a graph with a graph name as a .dot file
\index{Save graph with graph name to dot

\label{lst:save_graph_with_graph_name_to_dot}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Loading a directed graph with a graph name property from a .dot file}
\label{subsec:load_directed_graph_with_graph_name_from_dot}

This will result in a directed graph with a name:

\lstinputlisting[
  caption = ,
  label = lst:
]{load_directed_graph_with_graph_name_from_dot.impl}

Loading a directed graph with a graph name from a .dot file
\index{Load directed custom edges and vertices graph from dot

\label{lst:load_directed_graph_with_graph_name_from_dot}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Loading an undirected graph with a graph name property from a .dot file}
\label{subsec:load_undirected_graph_with_graph_name_from_dot}

This will result in an undirected graph with a name:

\lstinputlisting[
  caption = ,
  label = lst:
]{load_undirected_graph_with_graph_name_from_dot.impl}

Loading an undirected graph with a graph name from a .dot file
\index{Load undirected custom edges and vertices graph from dot

\label{lst:load_undirected_graph_with_graph_name_from_dot}

\section{...}
Other graph functions
\label{sec:Other-graph-functions}

Some functions that did not fit in.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Encode a std::string to a Graphviz-friendly format}
\label{subsec:graphviz_encode}

You may want to use a label with spaces, comma's and/or quotes.
 Saving and loading these, will result in problem.
 This function replaces these special characters by a rare combination of
 ordinary characters.

\lstinputlisting[
  caption = ,
  label = lst:
]{graphviz_encode.impl}

Encode a std::string to a Graphviz-friendly format
\index{graphviz encode

\label{lst:graphviz_encode}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Decode a std::string from a Graphviz-friendly format}
\label{subsec:graphviz_decode}

This function undoes the \verb;graphviz_encode' function (algorithm 
\ref{lst:graphviz_encode}

) and thus converts a Graphviz-friendly std::string to the original human-friend
ly std::string.

\lstinputlisting[
  caption = ,
  label = lst:
]{graphviz_decode.impl}

Decode a std::string from a Graphviz-friendly format to a human-friendly
 format
\index{graphviz decode

\label{lst:graphviz_decode}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Check if a std::string is Graphviz-friendly}
\label{subsec:is_graphviz_friendly}

There are pieces where I check if a std::string is Graphviz-friendly.
 This is done only where it matters.
 If it is tested not to matter, \verb;is_graphviz_friendly' is absent.

\lstinputlisting[
  caption = ,
  label = lst:
]{is_graphviz_friendly.impl}

Check if a std::string is Graphviz-friendly
\index{is_graphviz_friendly

\label{lst:is_graphviz_friendly}

\section{...}
Misc functions

These are some function I needed for creating this tutorial.
 Although they are not important for working with graphs, I used these heavily.
 These functions may be compiler-dependent, platform-dependent and/or there
 may be superior alternatives.
 I just add them for completeness.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Getting a data type as a std::string}
\label{subsec:get_type_name}

This function will only work under GCC.
 I found this code at: 
\begin_inset Flex URL
status collapsed

http://stackoverflow.com/questions/1055452/c-get-name-of-type-in-template

 .
 Thanks to \verb;m-dudley' (Stack Overflow user page at 
\begin_inset Flex URL
status open

http://stackoverflow.com/users/111327/m-dudley

 ).

\lstinputlisting[
  caption = ,
  label = lst:
]{get_type_name.impl}

Getting a data type its name as a std::string
\index{Get type name

\label{lst:get_type_name}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Convert a .dot to .svg}
\label{subsec:convert_dot_to_svg}

All illustrations in this tutorial are created by converting .dot to a .svg
 (\verb;Scalable Vector Graphic') file.
 This function assumes the program \verb;dot' is installed, which is part of
 Graphviz.

\lstinputlisting[
  caption = ,
  label = lst:
]{convert_dot_to_svg.impl}

Convert a .dot file to a .svg
\index{Convert dot to svg

\label{lst:convert_dot_to_svg}

\verb;convert_dot_to_svg' makes a system call to the program \verb;dot' to convert
 the .dot file to an .svg file.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Check if a file exists}
\label{subsec:is_regular_file}

Not the most smart way perhaps, but it does only use the STL.

\lstinputlisting[
  caption = ,
  label = lst:
]{is_regular_file.impl}

Check if a file exists
\index{Is regular file

\label{lst:is_regular_file}

\section{...}
Errors

Some common errors.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Formed reference to void}
\label{subsec:formed_reference_to_void}

This compile-time error occurs when you create a graph without a certain
 property, then subsequently reading that property, as in algorithm 
\ref{lst:formed_reference_to_void}

: 

\lstinputlisting[
  caption = ,
  label = lst:
]{formed_reference_to_void.impl}

Creating the error \verb;formed reference to void;
\index{Formed reference to void

\label{lst:formed_reference_to_void}

In algorithm 
\ref{lst:formed_reference_to_void}

 a graph is created with vertices of no properties.
 Then the names of these vertices, which do not exists, are tried to be
 read.
 If you want to read the names of the vertices, supply a graph that has
 this property.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{No matching function for call to \verb;;clear_out_edges;}
\label{subsec:no_matching_function_for_call_to_clear_out_edges}

This compile-time error occurs when you want to clear the outward edges
 from a vertex in an undirected graph.
 

\lstinputlisting[
  caption = ,
  label = lst:
]{no_matching_function_for_call_to_clear_out_edges.impl}

Creating the error \verb;no matching function for call to clear_out_edges'
\index{No matching function for call to clear_out_edges

\label{lst:no_matching_function_for_call_to_clear_out_edges}

In algorithm 
\ref{lst:no_matching_function_for_call_to_clear_out_edges}

an undirected graph is created, a vertex descriptor is obtained, then itsout
 edges are tried to be cleared.Either use a directed graph (which has out
 edges), or use the \verb;boost::clear_vertex' function instead.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{No matching function for call to \verb;clear_in_edges;}
\label{subsec:no_matching_function_for_call_to_clear_in_edges}

See chapter \ref{subsec:no_matching_function_for_call_to_clear_out_edges}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Undefined reference to boost::detail::graph::read_graphviz_new}
\label{subsec:undefined_reference_to_read_graphviz_new}
\index{read_graphviz_new}
\index{Undefined reference to read_graphviz_new}
\index{read_graphviz_new, undefined reference}

You will have to link
\index{link

 against the Boost.Graph and Boost.Regex libraries.
 In Qt Creator, this is achieved by adding these lines to your Qt Creator
 project file:

\begin{verbatim}\end{verbatim}
LIBS += -lboost_graph -lboost_regex 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Property not found: node_id}
\label{subsec:property_not_found_node_id}
\index{node_id}
\index{Property not found}
\index{Property not found: node_id}

When loading a graph from file (as in chapter 
\ref{subsec:load_undirected_graph_from_dot}

) you will be using boost::read_graphviz
\index{boost::read_graphviz

.
 boost::read_graphviz
\index{boost::read_graphviz

 needs a third argument, of type boost::dynamic_properties
\index{boost::dynamic_properties

.
 When a graph does not have properties, do not use a default constructed
 version, but initialize with \verb;boost::ignore_other_properties;
\index{boost::ignore_other_properties}
as a constructor argument instead. Listing \ref{lst:property_not_found_node_id} shows how to trigger this run-time error.

\lstinputlisting[
  caption = Creating the error 'Property not found: node_id',
  label = lst:property_not_found_node_id
]{property_not_found_node_id.impl}
\index{Property not found: node_id

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Stream zeroes}

When loading a graph from a .dot file, in operator>>, I encountered reading
 zeroes, where I expected an XML formatted string:

\begin{verbatim}
std::istream& ribi::cmap::operator>>(std::istream& is, my_class& any_class)
 noexcept
{
  std::string s;
  is >> s; //s has an XML format
  assert(s != 0);
  any_class = my_class(s);
  return is;
}
\end{verbatim}

This was because I misconfigured the reader.
 I did (heavily simplified code):

\begin{verbatim}
graph load_from_dot(const std::string& dot_filename)
{
  std::ifstream f(dot_filename);
  graph g;
  boost::dynamic_properties dp;
  dp.property(TODO}node_id}, get(boost::vertex_custom_type, g));
  dp.property(TODO}label}, get(boost::vertex_custom_type, g));
  boost::read_graphviz(f,g,dp);
  return g;
}
\end{verbatim}

Where it should have been:

\begin{verbatim}
graph load_from_dot(const std::string& dot_filename)
{
  std::ifstream f(dot_filename);
  graph g;
  boost::dynamic_properties dp(boost::ignore_other_properties);
  dp.property(}label}, get(boost::vertex_custom_type, g));
  boost::read_graphviz(f,g,dp);
  return g;
}
\end{verbatim}

The explanation is that by setting the boost::dynamic_property \verb;node_id'
 to \verb;boost::vertex_custom_type', operator>> will receive the node indices.
 

An alternative, but less clean solution, is to let operator>> ignore the
 node indices:

\begin{verbatim}
std::istream& ribi::cmap::operator>>(std::istream& is, my_class& any_class)
 noexcept
{
  std::string s;
  is >> s; //s has an XML format
  if (!is_xml(s)) { //Ignore node index
    any_class_class = my_class(); 
  }
  else {
    any_class_class = my_class(s);
  }
  return is;
}
\end{verbatim}

